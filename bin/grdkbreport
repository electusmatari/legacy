#!/usr/bin/env python

import datetime
import sys

import MySQLdb

sys.path.append("/home/forcer/Projects/evecode/web/electusmatari.com/data/python/emtools/ccpeve")
import eveapi

execfile("/home/forcer/Projects/private/old_access.py")

def main():
    end = datetime.datetime.utcnow().replace(day=1).date()
    start = (end - datetime.timedelta(days=1)).replace(day=1)
    prev = (start - datetime.timedelta(days=1)).replace(day=1)
    print "Based on data from %s - %s - %s" % (prev, start, end)
    print
    print ('The following lists Gradient pilots involved in kills '
           'during the last month in relation to the month before '
           'that and in relation to the pilots in the alliance as '
           'a whole. Pilots are assigned to the shift they are most '
           'active in. "Involved" is the amount of pilots involved '
           'on kill mails as a whole, giving a good idea on the '
           'contribution of the corp to the fighting force of the '
           'alliance as a whole.')
    print

    api = eveapi.EVEAPIConnection()
    grdid = api.eve.CharacterID(names='Gradient').characters[0].characterID
    grdmembers = api.corp.CorporationSheet(corporationID=grdid).memberCount
    emmembers = 0
    for ally in api.eve.AllianceList().alliances:
        if ally.name == 'Electus Matari':
            emmembers = ally.memberCount
            break
    print ("Gradient currently has %i members, or %i%% of "
           "Electus Matari's %i members" %
           (grdmembers, (grdmembers / float(emmembers)) * 100, emmembers))
    print

    conn = MySQLdb.connect(host=db_host, user=db_user, db='emkillboard',
                           passwd=db_pass)
    c = conn.cursor()
    c.execute("select crp_id from kb3_corps where crp_name = 'Gradient'")
    (corpid,) = c.fetchone()
    c.execute("select all_id from kb3_alliances "
              "where all_name = 'Electus Matari'")
    (allyid,) = c.fetchone()
    c.execute("select ind_timestamp, ind_plt_id from kb3_inv_detail "
              "where ind_crp_id = %s "
              "  and ind_timestamp >= %s "
              "  and ind_timestamp < %s",
              (corpid, prev, end))
    old = Reporter()
    new = Reporter()
    for ts, pilotid in c.fetchall():
        if ts.date() < start:
            old.add(ts, pilotid)
        else:
            new.add(ts, pilotid)
    ally = Reporter()
    c.execute("select ind_timestamp, ind_plt_id from kb3_inv_detail "
              "where ind_all_id = %s "
              "  and ind_timestamp >= %s "
              "  and ind_timestamp < %s",
              (allyid, start, end))
    for ts, pilotid in c.fetchall():
        ally.add(ts, pilotid)
    print "[pre]"
    new.report(old, ally)
    print "[/pre]"

class Reporter(object):
    def __init__(self):
        self.totalpilotcount = 0
        self.pilotspershift = {1: 0, 2: 0, 3:0}
        self.pilotshifts = {}
        self.involvedshifts = {1: 0, 2: 0, 3:0}

    def add(self, ts, pilotid):
        shift = getshift(ts)
        self.pilotshifts.setdefault(pilotid, {})
        self.pilotshifts[pilotid].setdefault(shift, 0)
        self.pilotshifts[pilotid][shift] += 1
        self.involvedshifts[shift] += 1

    def finalize(self):
        self.totalpilotcount = 0
        self.totalinvolved = sum(self.involvedshifts.values())
        self.pilotspershift = {1: 0, 2: 0, 3:0}
        for pilotid, shiftkills in self.pilotshifts.items():
            shift = sorted(shiftkills.items(), key=lambda x: x[1],
                           reverse=True)[0][0]
            self.totalpilotcount += 1
            self.pilotspershift[shift] += 1

    def report(self, old, ally):
        self.finalize()
        old.finalize()
        ally.finalize()
        print "|           | Pilots | Change | Alliance | Involved | Change | Alliance |"
        print "|-----------+--------+--------+----------+----------+--------+----------|"
        print "| Total     | %6i | %+6i | %7i%% | %8i | %+6i | %7i%% |" % (
            self.totalpilotcount,
            self.totalpilotcount - old.totalpilotcount,
            (self.totalpilotcount / float(ally.totalpilotcount)) * 100,
            self.totalinvolved,
            self.totalinvolved - old.totalinvolved,
            (self.totalinvolved / float(ally.totalinvolved)) * 100
            )
        for shift in 1, 2, 3:
            print "| %s Shift | %6i | %+6i | %7i%% | %8i | %+6i | %7i%% |" % (
                ordinal(shift),
                self.pilotspershift[shift],
                self.pilotspershift[shift] - old.pilotspershift[shift],
                (self.pilotspershift[shift] /
                 float(ally.pilotspershift[shift])) * 100,
                self.involvedshifts[shift],
                self.involvedshifts[shift] - old.involvedshifts[shift],
                (self.involvedshifts[shift] /
                 float(ally.involvedshifts[shift])) * 100
                )

def ordinal(n):
    if n == 1:
        return "1st"
    elif n == 2:
        return "2nd"
    elif n == 3:
        return "3rd"
    else:
        return "%ith" % n

def getshift(ts):
    if 6 <= ts.hour < 14:
        return 1
    elif 14 <= ts.hour < 22:
        return 2
    else:
        return 3

main()
