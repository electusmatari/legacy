#!/usr/bin/env python

from evelib import api

def main():
    apiroot = api.api()
    ally2corp = {}
    allysize = {}
    allyticker = {}
    corp2ally = {}
    for row in apiroot.eve.AllianceList().alliances:
        allysize[row.name] = row.memberCount
        allyticker[row.name] = row.shortName
        ally2corp[row.name] = [row2.corporationID 
                               for row2 in row.memberCorporations]
        for row2 in row.memberCorporations:
            corp2ally[row2.corporationID] = row.name

    entities = {}

    for name, standing in get_emstandings().items():
        if name not in entities:
            entities[name] = Entity(name=name, emstanding=0, coastanding=0,
                                    corps=[])
        entities[name].emstanding = standing
    for name, standing in get_coastandings().items():
        if name not in entities:
            entities[name] = Entity(name=name, emstanding=0, coastanding=0,
                                    corps=[])
        entities[name].coastanding = standing

    for name in entities.keys():
        if name in ally2corp:
            entities[name].size = allysize[name]
            entities[name].ticker = allyticker[name]
            entities[name].type = 'alliance'
            continue
        entities[name].type = 'corp'
        corpid = get_ownerid(name)
        try:
            cs = apiroot.corp.CorporationSheet(corporationID=corpid)
            entities[name].size = cs.memberCount
            entities[name].ticker = cs.ticker
            if cs.memberCount == 0:
                del entities[name]
            elif (corpid in corp2ally and
                  corp2ally[corpid] in entities):
                entities[corp2ally[corpid]].corps.append(entities[name])
                del entities[name]
        except:
            del entities[name]

    del entities['Electus Matari']

    mismatch = [e for e in entities.values()
                if ((e.coastanding > 0 and e.emstanding < 0) or
                    (e.coastanding < 0 and e.emstanding > 0))]
    print_entities("Mismatch (%s)" % len(mismatch),
                   mismatch)

    need_blue = [e for e in entities.values()
                 if e.coastanding > 0 and e.emstanding == 0]
    print_entities("Need Blue (%s)" % len(need_blue), need_blue)

    need_red = [e for e in entities.values()
                if e.coastanding < 0 and e.emstanding == 0]
    print_entities("Need Red (%s)" % len(need_red), need_red)

def print_entities(title, elist):
    print title
    print "=" * len(title)
    elist.sort(key=lambda e: e.size, reverse=True)
    for e in elist:
        print "%s - %s members - %+i -> %+i" % (
            e.fullname(), e.size, e.emstanding, e.coastanding)
        e.corps.sort(key=lambda c: c.name.lower())
        for c in e.corps:
            print "  %s (%+i -> %+i)" % (c.fullname(), c.emstanding,
                                         c.coastanding)
    print

class Entity(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

    def fullname(self):
        if self.type == 'corp':
            return "%s [%s]" % (self.name, self.ticker)
        else:
            return "%s <%s>" % (self.name, self.ticker)

    def is_relevant(self):
        if is_relevant(self.emstanding, self.coastanding):
            return True
        for c in self.corps:
            if is_relevant(c.emstanding, c.coastanding):
                return True
        return False


def is_relevant(st1, st2):
    if st1 > 0 and st2 > 0:
        return False
    elif st1 < 0 and st2 < 0:
        return False
    elif st2 == 0:
        return False
    else:
        return st1 != st2


def clean_standings(st, ally2corp, corp2ally):
    if 'Electus Matari' in st:
        del st['Electus Matari']
    for name in st.keys():
        if name in ally2corp:
            continue
        corpid = get_ownerid(name)
        if (corpid in corp2ally and
            corp2ally[corpid] in st):
            del st[name]
    return st

def get_emstandings():
    grd = api.corp()
    gcl = grd.ContactList()
    standings = {}
    for row in gcl.allianceContactList:
        standings[row.contactName] = row.standing
    return standings

import urllib, urllib2, cookielib, csv

def get_coastandings():
    username = 'COAstandings'
    password = '...'

    cj = cookielib.CookieJar()
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    login_data = urllib.urlencode({'username' : username,
                                   'password' : password})
    opener.open('http://www.coalitionofantipirates.com/standings/login.php',
                login_data)
    resp = opener.open('http://www.coalitionofantipirates.com/standings/download.php')
    reader = csv.reader(resp)
    reader.next() # skip header
    result = {}
    for row in reader:
        if len(row) < 2:
            continue
        name = row[0].strip()
        standing = int(row[1])
        # updated = row[2]
        # notes = " ".join(row[3:])
        result[name] = standing
    return result

def get_ownername(itemid):
    apiroot = api.api()
    return apiroot.eve.CharacterName(ids=itemid).characters[0].name

def get_ownerid(itemname):
    apiroot = api.api()
    return apiroot.eve.CharacterID(names=itemname).characters[0].characterID


if __name__ == '__main__':
    main()
