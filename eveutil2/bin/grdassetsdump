#!/usr/bin/env python

import csv
import sys
import StringIO

import evelib.api as api
import evelib.newdb as db

def main():
    result = Capital()
    corp = api.corp()
    add_wallet(corp, result)
    add_assets(corp, result)
    add_market(corp, result)
    add_industry(corp, result)
    sys.stdout.write(result.to_csv())

def add_wallet(corp, result):
    for acc in corp.AccountBalance().accounts:
        result.add("ISK cent", -1, long(acc.balance*100), "wallet",
                   [accountkey2name(corp, acc.accountKey)])

def add_assets(corp, result):
    def add(assets, path):
        for row in assets:
            rowpath = path
            if hasattr(row, 'locationID'):
                rowpath = rowpath + location2path(row.locationID)
            hangar = flagid2hangar(row.flag)
            if hangar is not None:
                rowpath = rowpath + [hangar]
            typename = typeid2name(row.typeID)
            result.add(typename, row.typeID, row.quantity,
                       "assets", rowpath)
            if hasattr(row, 'contents'):
                add(row.contents, rowpath + [typename])
    add(corp.AssetList().assets, [])

def add_market(corp, result):
    for order in corp.MarketOrders().orders:
        if order.orderState != 0:
            continue
        path = location2path(order.stationID)
        path = path + [accountkey2name(corp, order.accountKey)]
        if order.bid:
            result.add("ISK cent", -1, long(order.escrow * 100), "market.buy",
                       path)
        else:
            typename = typeid2name(order.typeID)
            result.add(typename, order.typeID, order.volRemaining,
                       "market.sell", path)

def add_industry(corp, result):
    for job in corp.IndustryJobs().jobs:
        if job.completed != 0:
            continue
        activity = activityid2name(job.activityID)
        path = locationitemid2path(job.installedItemLocationID,
                                   job.installedItemFlag)
        result.add(typeid2name(job.installedItemTypeID),
                   job.installedItemTypeID,
                   job.installedItemQuantity,
                   "industry.%s.input" % (activity.lower(),),
                   path)

        path = locationitemid2path(job.outputLocationID,
                                   job.outputFlag)
        result.add(typeid2name(job.outputTypeID),
                   job.outputTypeID,
                   job.runs * typeid2portionsize(job.outputTypeID),
                   "industry.%s.output" % (activity.lower(),),
                   path)

def accountkey2name(corp, accountkey):
    for div in corp.CorporationSheet().walletDivisions:
        if div.accountKey == accountkey:
            return div.description
    return "Unknown"

conn = db.connect()

_locationidcache = {}
def location2path(locationid, flagid=None):
    if locationid not in _locationidcache:
        if locationid >= 66000000 and locationid < 67000000:
            path = stationid2path(locationid - 6000001)
        elif locationid >= 67000000 and locationid < 68000000:
            path = outpostid2path(locationid - 6000000)
        else:
            try:
                path = stationid2path(locationid)
            except:
                path = [systemid2name(locationid)]
        _locationidcache[locationid] = path
    path = _locationidcache[locationid]
    hangar = flagid2hangar(flagid)
    if hangar is not None:
        path = path + [hangar]
    return path

_locationitemid2path = {}
def locationitemid2path(locationid, flagid=None):
    if locationid not in _locationitemid2path:
        corp = api.corp()
        for row in corp.AssetList().assets:
            _locationitemid2path[row.itemID] = location2path(row.locationID)
    if locationid in _locationitemid2path:
        path = _locationitemid2path[locationid]
        hangar = flagid2hangar(flagid)
        if hangar is not None:
            path = path + [hangar]
        return path
    else:
        return location2path(locationid, flagid)


_typeid2name = None
def typeid2name(typeid):
    global _typeid2name
    if _typeid2name is None:
        c = conn.cursor()
        c.execute("SELECT typeid, typename FROM ccp.invtypes")
        _typeid2name = dict(c.fetchall())
    return _typeid2name.get(typeid, "<TypeID %s>" % typeid)

_activityid2name = None
def activityid2name(activityid):
    global _activityid2name
    if _activityid2name is None:
        c = conn.cursor()
        c.execute("SELECT activityid, activityname FROM ccp.ramactivities")
        _activityid2name = dict(c.fetchall())
    return _activityid2name.get(activityid, "<ActivityID %s>" % activityid)

_typeid2portionsize = None
def typeid2portionsize(typeid):
    global _typeid2portionsize
    if _typeid2portionsize is None:
        c = conn.cursor()
        c.execute("SELECT typeid, portionsize FROM ccp.invtypes")
        _typeid2portionsize = dict(c.fetchall())
    return _typeid2portionsize.get(typeid, 1)

_flagid2hangar = None
def flagid2hangar(flagid):
    global _flagid2hangar
    if _flagid2hangar is None:
        c = conn.cursor()
        corp = api.corp()
        hangar = {}
        cs = corp.CorporationSheet()
        for row in cs.divisions:
            hangar["CorpSAG%i" % (row.accountKey - 1000 + 1)] = row.description
        _flagid2hangar = {}
        c.execute("SELECT flagid, flagname FROM invflags")
        for (flagid, flagname) in c.fetchall():
            if flagname == 'CorpMarket':
                _flagid2hangar[flagid] = 'Deliveries'
            elif flagname == 'Hangar':
                _flagid2hangar[flagid] = hangar['CorpSAG1']
            elif flagname.startswith("CorpSAG"):
                _flagid2hangar[flagid] = hangar[flagname]
            else:
                # _flagid2hangar[flagid] = flagname
                pass
    return _flagid2hangar.get(flagid, None)

_systemid2name = None
def systemid2name(systemid):
    global _systemid2name
    if _systemid2name is None:
        c = conn.cursor()
        c.execute("SELECT solarsystemid, solarsystemname "
                  "FROM ccp.mapsolarsystems")
        _systemid2name = dict(c.fetchall())
    return _systemid2name.get(systemid, "<SolarSystemID %s>" % (systemid,))

_stationid2path = None
def stationid2path(stationid):
    global _stationid2path
    if _stationid2path is None:
        c = conn.cursor()
        c.execute("SELECT st.stationid, sys.solarsystemname, st.stationname "
                  "FROM ccp.stastations st "
                  "     INNER JOIN ccp.mapsolarsystems sys "
                  "       ON st.solarsystemid = sys.solarsystemid")
        _stationid2path = dict((stationid, [system, station])
                               for (stationid, system, station)
                               in c.fetchall())
    return _stationid2path[stationid]

def split_outpostid(outpostid):
    apiroot = api.apiroot()
    for outpost in apiroot.eve.ConquerableStationList().outposts:
        if outpost.stationid == outpostid:
            return systemid2name(outpost.solarSystemID), outpost.stationName
    return "<OutpostID %s>" % outpostid

class Capital(object):
    def __init__(self):
        self.rows = []

    def add(self, typename, typeid, quantity, source, path):
        self.rows.append({'typename': typename,
                          'typeid': typeid,
                          'quantity': quantity,
                          'source': source,
                          'path': path})

    def to_csv(self):
        s = StringIO.StringIO()
        w = csv.writer(s)
        for row in self.rows:
            w.writerow([row['typename'],
                        row['typeid'],
                        row['quantity'],
                        row['source'],
                        "/".join(row['path'])])
        s.seek(0)
        return s.read()

if __name__ == '__main__':
    main()
