#!/usr/bin/env python

import datetime

import evelib.newdb as db
import evelib.api as api
from evelib.eveapi import Error as APIError

def main():
    corp = api.corp()
    conn = db.connect()
    c = conn.cursor()
    update_logs(c, corp)
    conn.commit()
    conn.close()

def update_logs(c, corp):
    for account in [1000, 1001, 1002, 1003, 1004, 1005, 1006]:
        update_journal(c, corp, account)
        update_transactions(c, corp, account)

def update_journal(c, corp, account):
    journal = corp.WalletJournal(rowCount=2560,
                                 accountKey=account)
    while True:
        if len(journal.entries) == 0:
            break
        for j in journal.entries:
            c.execute("SELECT COUNT(*) FROM grd_journal "
                      "WHERE refID = %s AND account = %s",
                      (j.refID, account))
            if c.fetchone()[0] > 0:
                continue
            c.execute("INSERT INTO grd_journal (account, date, refID, "
                      " refTypeID, ownerName1, ownerID1, ownerName2, "
                      " ownerID2, argName1, argID1, amount, balance, "
                      " reason) "
                      "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, "
                      "        %s, %s, %s)",
                      (account, datetime.datetime.utcfromtimestamp(j.date),
                       j.refID, j.refTypeID, j.ownerName1, j.ownerID1,
                       j.ownerName2, j.ownerID2, j.argName1, j.argID1,
                       j.amount, j.balance, j.reason))
        lastid = min(entry.refID for entry in journal.entries)
        journal = corp.WalletJournal(rowCount=2560,
                                     accountKey=account,
                                     fromID=lastid)

def update_transactions(c, corp, account):
    trans = corp.WalletTransactions(rowCount=2560,
                                    accountKey=account)
    while True:
        if len(trans.transactions) == 0:
            break
        for t in trans.transactions:
            c.execute("SELECT COUNT(*) FROM grd_transactions "
                      "WHERE transactionID = %s AND account = %s",
                      (t.transactionID, account))
            if c.fetchone()[0] > 0:
                continue
            c.execute("INSERT INTO grd_transactions (account, date, "
                      "  transactionID, quantity, typeName, typeID, price, "
                      "  characterID, characterName, clientID, clientName, "
                      "  stationID, stationName, transactionType, "
                      "  transactionFor) "
                      "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, "
                      "        %s, %s, %s, %s)",
                      (account, 
                       datetime.datetime.utcfromtimestamp(
                        t.transactionDateTime),
                       t.transactionID, t.quantity, t.typeName, t.typeID,
                       t.price, t.characterID, t.characterName, t.clientID,
                       t.clientName, t.stationID, t.stationName,
                       t.transactionType, t.transactionFor))
        lastid = trans.transactions[-1].transactionID
        trans = corp.WalletTransactions(rowCount=2560,
                                        accountKey=account,
                                        fromID=lastid)
main()
