#!/usr/bin/env python

import csv
import StringIO

import evelib.api as api
import evelib.db as edb
import twf.db as db
from evelib.util import humane

INDEXFILE = "/home/forcer/public_html/eve/gmi/current.txt"
PRICELIST = "/home/forcer/public_html/eve/grd-pricelist.txt"

REIMBURSEMENT_FUND_CAN = 1142760065
WSPACE_SYSTEM = 31001217

def main():
    grd = api.corp()
    prices = getprices()
    locations = {}
    notfound = set()
    c = db.cursor('dbeve')

    total = 0
    print "Wallets"
    print "======="
    gcs = grd.CorporationSheet()
    accounts = dict((row.accountKey, row.description) for row in
                    gcs.walletDivisions)
    gab = grd.AccountBalance()
    total += pricereport([(accounts[row.accountKey], row.balance)
                          for row in gab.accounts
                          if accounts[row.accountKey] in ['Production',
                                                          'Master Wallet',
                                                          'Reserve']])
    print
    print "Assets"
    print "======"
    assets = grd.AssetList()
    assetlist = getassets(assets.assets)
    result = []
    hangars = []
    officehangars = []
    unknown = []
    have_nomad = False
    have_fenrir = False
    for row in assetlist:
        if row.typename not in prices:
            notfound.add(row.typename)
        result.append((row.location, prices.get(row.typename, 0) * row.qty))
        hangars.append((row.hangar(), prices.get(row.typename, 0) * row.qty))
        officehangars.append(("%s (%s)" % (row.location, row.hangar()),
                              prices.get(row.typename, 0) * row.qty))
        locations[row.itemid] = row.location
        if row.typename == 'Nomad':
            have_nomad = True
        if row.typename == 'Fenrir' and row.singleton:
            have_fenrir = True
    total += pricereport(result, cutoff=100)
    if not have_nomad:
        price = prices.get("Nomad", 0) / 1000 / 1000
        print
        print("No Nomad found, adding %s M to total." % 
              (humane(price),))
        total += price
    if not have_fenrir:
        price = prices.get("Fenrir", 0) / 1000 / 1000
        print
        print("No assembled Fenrir found, adding %s M to total." % 
              (humane(price),))
        total += price
    print
    print "By Hangar"
    print "---------"
    pricereport(hangars)

    # print
    # print "By Office Hangar"
    # print "----------------"
    # pricereport(officehangars, cutoff=100)

    gmo = grd.MarketOrders()
    print
    print "Sell Orders"
    print "==========="
    for row in gmo.orders:
        tn = typeid2name(row.typeID)
        if tn not in prices:
            notfound.add(tn)
    report = []
    profits = {}
    for row in gmo.orders:
        if row.bid != 0 or row.orderState != 0 or row.accountKey not in (1000, 1001, 1002):
            continue
        station = stationid2name(row.stationID)
        productioncost = prices.get(typeid2name(row.typeID), 0) * row.volRemaining
        salesprice = row.price * row.volRemaining
        report.append((station, productioncost))
        profits.setdefault(station, (0, 0))
        (production_total, sales_total) = profits[station]
        if productioncost > 0:
            production_total += productioncost
            sales_total += salesprice
        profits[station] = (production_total, sales_total)
    total += pricereport(report)
    print
    print "Expected Profit Margins"
    print "======================="
    report = [(1 - (production / sales), station)
              for (station, (production, sales)) in profits.items()
              if production != 0]
    report.sort(reverse=True)
    for profit, station in report:
        print "%10.2f%% %s" % (profit*100, station)

    print
    print "Buy Orders"
    print "=========="
    total += pricereport([(stationid2name(row.stationID),
                           row.escrow)
                          for row in gmo.orders
                          if row.bid == 1
                          and row.orderState == 0
                          and row.accountKey in (1000, 1001, 1002)])
    print
    print "Industry Jobs"
    print "============="
    gij = grd.IndustryJobs()
    jobs = []
    for row in gij.jobs:
        if row.activityID != 1: # Manufacturing
            continue
        bp = edb.invBlueprintTypes.get(c, "blueprinttypeid",
                                       row.installedItemTypeID)
        prod = bp.producttype.typename
        if prod not in prices:
            notfound.add(prod)
        jobs.append((locations[row.installedItemLocationID],
                     prices.get(prod, 0) * row.runs))
    total += pricereport(jobs)
    print
    print "Grand Total"
    print "==========="
    print "%10s M" % humane(total)
    print
    # l = list(notfound)
    # l.sort()
    # for x in l:
    #     print x

def pricereport(lis, cutoff=0):
    sums = {}
    for (loc, total) in lis:
        sums.setdefault(loc, 0)
        sums[loc] += float(total) / (1000.0 * 1000)
    sums = sums.items()
    sums.sort(lambda a, b: cmp(a[1], b[1]), reverse=True)
    total = 0
    rest = 0
    restcount = 0
    for (station, value) in sums:
        if value > cutoff:
            print "%10s M %s" % (humane(value), station)
        else:
            rest += value
            restcount += 1
        total += value
    if rest > 0:
        print "%10s M Rest (in %s lines)" % (humane(rest), humane(restcount))
    print "---------------"
    print "%10s M Total" % humane(total)
    return total

def getprices():
    index = dict([(row[0], float(row[1])) for row in 
                  csv.reader(file(INDEXFILE)) if row[1] not in ('Index', '')])
    prices = dict([(row[0], float(row[1])) for row in
                   csv.reader(file(PRICELIST))])
    prices.update(index)
    c = db.cursor('dbeve')
    c.execute("SELECT t.typename, t.baseprice * 0.9 "
              "FROM ccp.invtypes t "
              "     INNER JOIN ccp.invgroups g "
              "       ON t.groupid = g.groupid "
              "     INNER JOIN ccp.invcategories c "
              "       ON g.categoryid = c.categoryid "
              "WHERE t.published = 1 "
              "  AND c.categoryname = 'Blueprint' "
              "  AND t.baseprice > 0")
    prices.update(dict(c.fetchall()))
    return prices

def getassets(assets, locationid=None, container=None):
    result = []
    for row in assets:
        if row.itemID == REIMBURSEMENT_FUND_CAN:
            continue
        if hasattr(row, 'locationID'):
            locationid = row.locationID
        if locationid == WSPACE_SYSTEM:
            continue
        if getattr(row, 'rawQuantity', 0) == -2: # BPC:
            continue
        item = Item(row.itemID, locationid, row.typeID,
                    row.quantity, row.flag, row.singleton,
                    container)
        result.append(item)
        if hasattr(row, 'contents'):
            result.extend(getassets(row.contents, locationid, item))
    return result

class Item(object):
    def __init__(self, itemid, locationid, typeid, qty, flag, singleton,
                 container=None):
        self.itemid = itemid
        self.location = locationid2name(locationid)
        self.typename = typeid2name(typeid)
        self.qty = qty
        self.flag = flagid2name(flag)
        self.singleton = singleton
        self.container = container

    def hangar(self):
        this = self
        while this is not None:
            if this.flag == 'Deliveries':
                return this.flag
            if this.container is not None:
                if this.container.typename == 'Office':
                    return this.flag
            this = this.container
        return None

    def containerlist(self):
        result = []
        can = self.container
        while can is not None:
            result.append((can.typename, can.flag))
            can = can.container
        result.reverse()
        return result

_locationid2name = {}
def locationid2name(locationID):
    global _locationid2name
    if locationID not in _locationid2name:
        if locationID >= 66000000 and locationID < 67000000:
            _locationid2name[locationID] = stationid2name(locationID - 6000001)
        elif locationID >= 67000000 and locationID < 68000000:
            _locationid2name[locationID] = outpostid2name(locationID - 6000000)
        else:
            try:
                _locationid2name[locationID] = stationid2name(locationID)
            except KeyError:
                _locationid2name[locationID] = systemid2name(locationID)
    return _locationid2name[locationID]

_stations = None
def stationid2name(staid):
    global _stations
    if _stations is None:
        c = db.cursor('dbeve')
        c.execute("SELECT stationid, stationname FROM ccp.stastations")
        _stations = dict(c.fetchall())
    return _stations[staid]

def outpostid2name(outpostid):
    return "<Outpost %i>" % outpostid

_systems = None
def systemid2name(sysid):
    global _systems
    if _systems is None:
        c = db.cursor('dbeve')
        c.execute("SELECT solarsystemid, solarsystemname "
                  "FROM ccp.mapsolarsystems")
        _systems = dict(c.fetchall())
    return _systems[sysid]

_types = None
def typeid2name(typeid):
    global _types
    if _types is None:
        c = db.cursor('dbeve')
        c.execute("SELECT typeid, typename FROM ccp.invtypes")
        _types = dict(c.fetchall())
    return _types.get(typeid, "<invType %s>" % typeid)

_flags = None
def flagid2name(flag):
    global _flags
    if _flags is None:
        _flags = {}
        hangar = {}
        c = db.cursor('dbeve')
        c.execute("SELECT flagid, flagname FROM ccp.invflags")
        corp = api.corp()
        cs = corp.CorporationSheet()
        for row in cs.divisions:
            hangar["CorpSAG%i" % (row.accountKey - 1000 + 1)] = row.description
        for (flagid, flagname) in c.fetchall():
            if flagname == 'CorpMarket':
                _flags[flagid] = 'Deliveries'
            elif flagname == 'Hangar':
                _flags[flagid] = hangar['CorpSAG1']
            elif flagname.startswith("CorpSAG"):
                _flags[flagid] = hangar[flagname]
            else:
                _flags[flagid] = flagname
    return _flags[flag]

if __name__ == '__main__':
    main()
