#!/usr/bin/env python

# FIXME!
# - history of cap ships shows cap ship fleets that don't belong to
#   this entity? => Can't reproduce?
# - Looking for regions + systems does AND, not OR
# TODO:
# - Could go for ranking of groups their former pilots went to
# - If factions or alliances, display known member corps

import datetime
import optparse
import sys

import evelib.newdb as db
from sdb.orm import O

STARTER_SYSTEMS = [
    "Ammold", "Hadaugago", "Krilmokenur", "Larkugei", "Loguttur", # RMS
    "Ryddinjorn", "Embod", "Abrat", "Erego", "Fildar", # PTS
    "Hulm", "Malukker", "Orgron", "Todeko", "Usteli" # RUN
    ] 

def main():
    parser = optparse.OptionParser(usage="%prog [OPTIONS]",
                                   version="%prog 1.0")
    parser.add_option("--after", dest="after", default=None,
                      help="Only include kills after (and including) this date")
    parser.add_option("--before", dest="before", default=None,
                      help="Only include kills before this date")
    parser.add_option("--faction", dest="factions", default=[],
                      action="append",
                      help="Retrieve intel on ALLIANCE")
    parser.add_option("--alliance", dest="alliances", default=[],
                      action="append",
                      help="Retrieve intel on ALLIANCE")
    parser.add_option("--corp", dest="corps", default=[],
                      action="append",
                      help="Retrieve intel on CORP")
    parser.add_option("--pilot", dest="pilots", default=[],
                      action="append",
                      help="Retrieve intel on PILOT")
    parser.add_option("--region", dest="regions", default=[],
                      action="append",
                      help="Retrieve intel on REGION")
    parser.add_option("--system", dest="systems", default=[],
                      action="append",
                      help="Retrieve intel on SYSTEM")
    (options, args) = parser.parse_args()
    if options.after:
        after = datetime.datetime.strptime(options.after, "%Y-%m-%d")
    else:
        after = datetime.datetime.now() - datetime.timedelta(days=28)
    if options.before:
        before = datetime.datetime.strptime(options.before, "%Y-%m-%d")
    else:
        before = datetime.datetime.utcnow()
    if len(options.regions) > 0 or len(options.systems) > 0:
        area_report(after, before,
                    regions=options.regions,
                    systems=options.systems)
    if (len(options.factions) > 0 or len(options.alliances) > 0 or
        len(options.corps) > 0 or len(options.pilots) > 0):
        entity_report(after, before,
                      factions=options.factions,
                      alliances=options.alliances,
                      corps=options.corps,
                      pilots=options.pilots)

def area_report(after, before, regions=[], systems=[]):
    r = BBReport()
    conn = db.connect()

    hq = HistoricQuery()
    hq = hq.filter_dates(after, before)
    hq = hq.filter_regions(regions)
    hq = hq.filter_systems(systems)

    kq = KillInfoQuery()
    kq = kq.filter_dates(after, before)
    kq = kq.filter_regions(regions)
    kq = kq.filter_systems(systems)

    c = conn.cursor()
    c.execute(*hq.select("SUM(shipkills)"))
    apikills = c.fetchone()[0]
    c.execute(*kq.select("COUNT(*)"))
    kills = c.fetchone()[0]
    if kills == 0:
        raise RuntimeError("No kill mails found")
    r.title("Area Report")
    r.paragraph("Over %s kills (%s API) from %s to %s in %s." %
                (kills, apikills,
                 after.strftime("%Y-%m-%d"),
                 before.strftime("%Y-%m-%d"),
                 ", ".join(regions + systems)))

    r.section("Hourly Distribution (API, percentage)")
    r.code(hourgraph(hq.fetch_hourly(conn)))

    r.section("Hourly Distribution (KDB, percentage)")
    r.code(hourgraph(kq.fetch_hourly(conn)))

    r.section("History (API)")
    r.list(daygraph(hq.fetch_history(conn)))

    r.section("History (KDB)")
    r.list(daygraph(kq.fetch_history(conn)))

    r.section("Top 20 Areas (API)")
    r.list(["%s" % (system,) for (system, count) in hq.fetch_systems(conn, 20)])

    r.section("Top 20 Areas (KDB)")
    r.list(["%s" % (system,) for (system, count) in kq.fetch_systems(conn, 20)])

    r.section("Top 20 Entities")
    r.list(["%s (%s kills from %s to %s)" % (
                entity, count,
                start.strftime("%Y-%m-%d"),
                end.strftime("%Y-%m-%d"))
            for (entity, count, start, end) in kq.fetch_entities(conn, 20)])

    r.section("Top 20 Capital Using Entities")
    r.list(["%s (%s %s)" % (entity, count,
                            plural(count, "capital pilot", "capital pilots"))
            for (entity, count) in kq.fetch_capitals(conn, 20)])

    r.section("Top 20 Tower Killing Entities")
    r.list(["%s (%s %s from %s to %s)" % (
                entity, count,
                plural(count, "tower kill", "tower kills"),
                start.strftime("%Y-%m-%d"), end.strftime("%Y-%m-%d"))
            for (entity, count, start, end) in kq.fetch_tower_kills(conn, 20)])

    print str(r)

def entity_report(after, before, factions, alliances, corps, pilots):
    r = BBReport()
    conn = db.connect()

    kq = KillInfoQuery()
    kq = kq.filter_dates(after, before)
    kq = kq.filter_factions(factions)
    kq = kq.filter_alliances(alliances)
    kq = kq.filter_corps(corps)
    kq = kq.filter_pilots(pilots)

    iq = KillInvolvedQuery()
    iq = iq.filter_dates(after, before)
    iq = iq.filter_factions(factions)
    iq = iq.filter_alliances(alliances)
    iq = iq.filter_corps(corps)
    iq = iq.filter_pilots(pilots)

    pq = PilotQuery()
    pq = pq.filter_factions(factions)
    pq = pq.filter_alliances(alliances)
    pq = pq.filter_corps(corps)
    pq = pq.filter_pilots(pilots)

    c = conn.cursor()
    c.execute(*kq.select("COUNT(*)"))
    kills = c.fetchone()[0]
    r.title("Intel Report")
    r.paragraph("Over %s kills from %s to %s by %s." %
                (kills,
                 after.strftime("%Y-%m-%d"),
                 before.strftime("%Y-%m-%d"),
                 ", ".join(factions + alliances +
                           corps + pilots)))

    r.section("Activity")

    r.subsection("Hourly Distribution (percentage)")
    r.code(hourgraph(kq.fetch_hourly(conn)))

    r.subsection("History")
    r.list(daygraph(kq.fetch_history(conn)))

    r.subsection("Hourly Maximum Fleet Size")
    r.code(hourgraph(iq.fetch_hourly_fleet_size(conn),
                     percentage=False))

    r.subsection("History of Maximum Fleet Size")
    r.list(daygraph(iq.fetch_history_fleet_size(conn),
                    max))

    r.subsection("Hourly Maximum Capital Fleet Size")
    r.code(hourgraph(iq.fetch_hourly_capitals(conn),
                     percentage=False))

    r.subsection("History of Maximum Capital Fleet Size")
    r.list(daygraph(iq.fetch_history_capitals(conn),
                    max))

    r.subsection("Regional Activity (Top 5)")
    r.list(kq.fetch_region_activity(conn, 50))

    r.subsection("System Activity (Top 20)")
    r.list(kq.fetch_system_activity(conn, 20))

    r.subsection("Known Control Towers")
    r.list(iq.fetch_control_towers(conn))

    r.section("Allies")
    r.paragraph("Pilots on the same kill mail.")
    r.list(iq.fetch_allies(conn))

    r.section("Pilots")

    r.subsection("Falcon Pilots")
    r.list(pq.fetch_shiptypes(conn, ["Falcon"]))
    
    r.subsection("Capital Ship Pilots")
    r.list(pq.fetch_shiptypes(conn, ["Nidhoggur", "Thanatos", "Chimera",
                                     "Archon",
                                     "Naglfar", "Moros", "Phoenix",
                                     "Revelation"]))
    
    r.subsection("Supercapital Pilots")
    r.list(pq.fetch_shiptypes(conn, ["Hel", "Nyx", "Wyvern", "Aeon",
                                     "Ragnarok", "Erebus", "Leviathan",
                                     "Avatar"]))

    r.subsection("Known Members")
    r.list(pq.fetch_pilots(conn))

    print str(r)

class BBReport(object):
    def __init__(self):
        self.data = []
        self.in_section = False

    def __str__(self):
        if self.in_section:
            sys.stderr.write("done.\n")
        self.in_section = False
        return "".join(self.data)

    def title(self, title):
        self.data.append("[size=x-large][b]%s[/b][/size]\n" % title)

    def section(self, title):
        if self.in_section:
            sys.stderr.write("done.\n")
        self.in_section = True
        self.data.append("\n[size=large][b]%s[/b][/size]\n" % title)
        sys.stderr.write("Generating %s ... " % title)

    def subsection(self, title):
        self.data.append("\n[b]%s[/b]\n" % title)

    def paragraph(self, paragraph):
        self.data.append("\n")
        self.data.append(paragraph + "\n")

    def code(self, code):
        self.data.append("\n")
        self.data.append("[code]%s[/code]\n" % code)

    def list(self, list):
        self.data.append("[list=1]")
        for elt in list:
            self.data.append("[*]%s\n" % elt)
        self.data.append("[/list]\n")

class OrderedList(object):
    def __init__(self):
        self.entries = []

    def add(self, line, sortkey):
        self.entries.append((sortkey, line))

    def draw(self):
        self.entries.sort()
        return "[list=1]%s[/list]\n" % "".join("[*]%s\n" % entry[1] for entry in self.entries)

def hourgraph(hours, percentage=True):
     hours = dict(hours)
     total = sum(hours.values()) * 1.0
     if percentage:
         multiplier = 100 / total
     else:
         multiplier = 1
     header = "| %s |" % " ".join("%02i" % x for x in range(24))
     values = "| %s |" % " ".join(("%2i" % (hours.get(x, 0) * multiplier))
                                  for x in range(24))
     return "%s\n%s\n" % (header, values)

def daygraph(history, combine=lambda a, b: a + b):
    if len(history) == 0:
        return []
    start = min([x[0] for x in history])
    end = max([x[0] for x in history])
    day = datetime.timedelta(days=1)
    delta = end - start
    if delta.days > 56:
        # Use per-month
        datehash = lambda dt: dt.strftime("%Y-%m-XX")
    elif delta.days > 14:
        # Use per-week
        datehash = lambda dt: ("%s - %s" % (
                (dt - dt.weekday() * day).strftime("%Y-%m-%d"),
                (dt + (7 - dt.weekday()) * day).strftime("%Y-%m-%d"),
                ))
    else:
        # Use per-day
        datehash = lambda dt: dt.strftime("%Y-%m-%d")
    buckets = {}
    for ts, count in history:
        ts = datehash(ts)
        buckets.setdefault(ts, 0)
        buckets[ts] = combine(buckets[ts], count)
    now = start
    while now <= end:
        buckets.setdefault(datehash(now), 0)
        now += day
    fulllist = buckets.items()
    fulllist.sort(reverse=True)
    return ["%s: %s" % (day, val) for (day, val) in fulllist]

class Select(object):
    def __init__(self, from_=None, where=None, tables=[]):
        self._tables = tables
        if from_ is None:
            self._from = O()
        else:
            self._from = from_
        if where is None:
            self._where = O()
        else:
            self._where = where

    def join(self, table, query, type="INNER"):
        if table in self._tables:
            return self
        q = self.__class__(self._from + (" %s JOIN " % type) + table +
                           " ON " + query,
                           self._where,
                           self._tables + [table])
        return q

    def where(self, query):
        return self.__class__(self._from,
                              self._where & query,
                              self._tables)

    def select(self, columns, extra=""):
        if not isinstance(columns, basestring):
            columns = ", ".join(columns)
        return (O("SELECT ") + columns +
                " FROM " + self._from +
                " WHERE " + self._where +
                " " + extra)

class HistoricQuery(Select):
    def __init__(self, from_=None, where=None, tables=[]):
        if from_ is None:
            from_ = "historic_map hm"
            tables = ["historic_map hm"]
        super(HistoricQuery, self).__init__(from_, where, tables)

    def filter_dates(self, after, before):
        return self.where(O("hm.timestamp >= %s", [after]) &
                          O("hm.timestamp < %s", [before]))
    
    def filter_regions(self, regions):
        if len(regions) == 0:
            return self
        q = self.join("ccp.mapsolarsystems sys",
                      O("hm.solarsystemid = sys.solarsystemid"))
        q = q.join("ccp.mapregions reg",
                   O("sys.regionid = reg.regionid"))
        return q.where("reg.regionname IN " + O(regions))

    def filter_systems(self, systems):
        if len(systems) == 0:
            return self
        q = self.join("ccp.mapsolarsystems sys",
                      O("hm.solarsystemid = sys.solarsystemid"))
        return q.where("sys.solarsystemname IN " + O(systems))

    def fetch_hourly(self, conn):
        c = conn.cursor()
        c.execute(*self.select(["DATE_PART('hour', timestamp) AS hour",
                                "SUM(shipkills) AS c"],
                               "GROUP BY DATE_PART('hour', timestamp)"))
        return c.fetchall()

    def fetch_history(self, conn):
        c = conn.cursor()
        c.execute(*self.select(["DATE_TRUNC('day', timestamp) AS day",
                                "SUM(shipkills) AS c"],
                               "GROUP BY DATE_TRUNC('day', timestamp) "
                               "ORDER BY day DESC"))
        return c.fetchall()

    def fetch_systems(self, conn, limit):
        c = conn.cursor()
        q = self.join("ccp.mapsolarsystems sys",
                      O("hm.solarsystemid = sys.solarsystemid"))
        c.execute(*q.select(["sys.solarsystemname",
                             "SUM(shipkills) AS c"],
                            "GROUP BY sys.solarsystemname "
                            "ORDER BY c DESC, sys.solarsystemname ASC "))
        return cluster(conn, c.fetchall(), limit)

class KillInfoQuery(Select):
    def __init__(self, from_=None, where=None, tables=[]):
        if from_ is None:
            from_ = "killinfo ki"
            where = O("NOT ki.isfake")
            tables = ["killinfo ki"]
        super(KillInfoQuery, self).__init__(from_, where, tables)

    def filter_dates(self, after, before):
        return self.where(O("ki.date >= %s", [after]) &
                          O("ki.date < %s", [before]))
    
    def filter_regions(self, regions):
        if len(regions) == 0:
            return self
        q = self.join("ki_system ksys",
                      O("ki.system_id = ksys.id"))
        q = q.join("ccp.mapsolarsystems sys",
                   O("ksys.externalid = sys.solarsystemid"))
        q = q.join("ccp.mapregions reg",
                   O("sys.regionid = reg.regionid"))
        return q.where("reg.regionname IN " + O(regions))

    def filter_systems(self, systems):
        if len(systems) == 0:
            return self
        q = self.join("ki_system ksys",
                      O("ki.system_id = ksys.id"))
        q = q.join("ccp.mapsolarsystems sys",
                   O("ksys.externalid = sys.solarsystemid"))
        return q.where("sys.solarsystemname IN " + O(systems))

    def filter_factions(self, factions):
        if len(factions) == 0:
            return self
        subq = ("SELECT * "
                "FROM ki_involved inv "
                "     INNER JOIN ki_faction invf "
                "       ON inv.faction_id = invf.id "
                 "WHERE inv.kill_id = ki.id "
                 "  AND invf.name IN " + O(factions))
        return self.where("EXISTS (" + subq + ")")

    def filter_alliances(self, alliances):
        if len(alliances) == 0:
            return self
        subq = ("SELECT * "
                "FROM ki_involved inv "
                "     INNER JOIN ki_alliance inva "
                "       ON inv.alliance_id = inva.id "
                 "WHERE inv.kill_id = ki.id "
                 "  AND inva.name IN " + O(alliances))
        return self.where("EXISTS (" + subq + ")")

    def filter_corps(self, corps):
        if len(corps) == 0:
            return self
        subq = ("SELECT * "
                "FROM ki_involved inv "
                "     INNER JOIN ki_corp invc "
                "       ON inv.corp_id = invc.id "
                 "WHERE inv.kill_id = ki.id "
                 "  AND invc.name IN " + O(corps))
        return self.where("EXISTS (" + subq + ")")

    def filter_pilots(self, pilots):
        if len(pilots) == 0:
            return self
        subq = ("SELECT * "
                "FROM ki_involved inv "
                "     INNER JOIN ki_pilot invp "
                "       ON inv.name_id = invp.id "
                 "WHERE inv.kill_id = ki.id "
                 "  AND invp.name IN " + O(pilots))
        return self.where("EXISTS (" + subq + ")")

    def fetch_hourly(self, conn):
        c = conn.cursor()
        c.execute(*self.select(["DATE_PART('hour', ki.date) AS hour",
                                "COUNT(*) AS c"],
                               "GROUP BY DATE_PART('hour', ki.date)"))
        return c.fetchall()

    def fetch_history(self, conn):
        c = conn.cursor()
        c.execute(*self.select(["DATE_TRUNC('hour', ki.date) AS hour",
                                "COUNT(*) AS c"],
                               "GROUP BY DATE_TRUNC('hour', ki.date) "
                               "ORDER BY c DESC"))
        return c.fetchall()

    def fetch_systems(self, conn, limit):
        c = conn.cursor()
        q = self.join("ki_system ksys",
                      O("ki.system_id = ksys.id"))
        q = q.join("ccp.mapsolarsystems sys",
                   O("ksys.externalid = sys.solarsystemid"))
        c.execute(*q.select(["sys.solarsystemname",
                             "COUNT(*) AS c"],
                            "GROUP BY sys.solarsystemname "
                            "ORDER BY c DESC, sys.solarsystemname ASC "))
        return cluster(conn, c.fetchall(), limit)

    def fetch_entities(self, conn, limit):
        c = conn.cursor()
        q = self.join("ki_involved inv",
                      O("inv.kill_id = ki.id")
                      ).where(O("not inv.isnpc"))
        q = q.join("ki_corp invc",
                   O("inv.corp_id = invc.id"))
        q = q.join("ki_alliance inva",
                   O("inv.alliance_id = inva.id"),
                   "LEFT")
        q = q.where(O("NOT inv.isnpc"))
        oq = ("SELECT entity, COUNT(*) AS c, MIN(date), MAX(date)"
              "FROM (" + q.select(["DISTINCT "
                                   "COALESCE(inva.name, invc.name) AS entity",
                                   "ki.date AS date"]) + ") AS sq " +
              "GROUP BY entity " +
              "ORDER BY c DESC, entity ASC " +
              ("LIMIT %s" % limit)
              )
        c.execute(*oq)
        return c.fetchall()

    def fetch_capitals(self, conn, limit):
        c = conn.cursor()
        q = self.join("ki_involved inv",
                      O("inv.kill_id = ki.id"))
        q = q.join("ki_corp invc",
                   O("inv.corp_id = invc.id"))
        q = q.join("ki_alliance inva",
                   O("inv.alliance_id = inva.id"),
                   "LEFT")
        q = q.join("ki_type invt",
                   O("inv.ship_id = invt.id"))
        q = q.join("ccp.invtypes shipt",
                   O("invt.externalid = shipt.typeid"))
        q = q.join("ccp.invgroups shipg",
                   O("shipt.groupid = shipg.groupid"))
        q = q.where(O("NOT inv.isnpc"))
        q = q.where(O("shipg.groupname IN ('Carrier', 'Dreadnought', "
                      "                    'Supercarrier', 'Titan')"))
        oq = ("SELECT entity, COUNT(*) AS c "
              "FROM (" + q.select(["DISTINCT ON (inv.name_id) "
                                   "inv.name_id",
                                   "COALESCE(inva.name, invc.name) AS entity"]
                                  ) + ") AS sq " +
              "GROUP BY entity "
              "ORDER BY c DESC, entity ASC "
              "LIMIT %s" % limit)
        c.execute(*oq)
        return c.fetchall()

    def fetch_tower_kills(self, conn, limit):
        q = self.join("ki_type kt",
                      O("ki.destroyed_id = kt.id"))
        q = q.join("ccp.invtypes t",
                   O("kt.externalid = t.typeid"))
        q = q.join("ccp.invgroups g",
                   O("t.groupid = g.groupid"))
        q = q.where(O("g.groupname = 'Control Tower'"))
        return q.fetch_entities(conn, limit)

    def fetch_region_activity(self, conn, limit):
        c = conn.cursor()
        q = self.join("ki_system ksys",
                      O("ki.system_id = ksys.id"))
        q = q.join("ccp.mapsolarsystems sys",
                   O("ksys.externalid = sys.solarsystemid"))
        q = q.join("ccp.mapregions reg",
                   O("sys.regionid = reg.regionid"))
        c.execute(*q.select(["reg.regionname",
                             "COUNT(*) AS c"],
                            "GROUP BY reg.regionname "
                            "ORDER BY c DESC, reg.regionname ASC "
                            "LIMIT %s" % limit))
        return ["%s (%s)" % (region, kills)
                for (region, kills) in c.fetchall()]

    def fetch_system_activity(self, conn, limit):
        c = conn.cursor()
        q = self.join("ki_system ksys",
                      O("ki.system_id = ksys.id"))
        q = q.join("ccp.mapsolarsystems sys",
                   O("ksys.externalid = sys.solarsystemid"))
        q = q.join("ccp.mapregions reg",
                   O("sys.regionid = reg.regionid"))
        c.execute(*q.select(["ksys.name",
                             "reg.regionname",
                             "COUNT(*) AS c"],
                            "GROUP BY ksys.name, reg.regionname "
                            "ORDER BY c DESC, ksys.name ASC "
                            "LIMIT %s" % limit))
        return ["%s, %s (%s)" % (name, region, kills)
                for (name, region, kills) in c.fetchall()]

class KillInvolvedQuery(Select):
    def __init__(self, from_=None, where=None, tables=[]):
        if from_ is None:
            from_ = ("ki_involved inv INNER JOIN killinfo ki "
                     "ON inv.kill_id = ki.id")
            where = O("NOT ki.isfake")
            tables = ["ki_involved inv", "killinfo ki"]
        super(KillInvolvedQuery, self).__init__(from_, where, tables)

    def filter_dates(self, after, before):
        q = self.join("killinfo ki",
                      O("inv.kill_id = ki.id"))
        return q.where(O("ki.date >= %s", [after]) &
                       O("ki.date < %s", [before]))

    def filter_factions(self, factions):
        if len(factions) == 0:
            return self
        q = self.join("ki_faction invf",
                      O("inv.faction_id = invf.id"))
        return q.where("invf.name IN " + O(factions))

    def filter_alliances(self, alliances):
        if len(alliances) == 0:
            return self
        q = self.join("ki_alliance inva",
                      O("inv.alliance_id = inva.id"))
        return q.where("inva.name IN " + O(alliances))

    def filter_corps(self, corps):
        if len(corps) == 0:
            return self
        q = self.join("ki_corp invc",
                      O("inv.corp_id = invc.id"))
        return q.where("invc.name IN " + O(corps))

    def filter_pilots(self, pilots):
        if len(pilots) == 0:
            return self
        q = self.join("ki_pilot invp",
                      O("inv.name_id = invp.id"))
        return q.where("invp.name IN " + O(pilots))

    def fetch_hourly_fleet_size(self, conn):
        c = conn.cursor()
        q = self.join("killinfo ki",
                      O("ki.id = inv.kill_id"))
        c.execute(*q.select(["DATE_PART('hour', ki.date) AS hour",
                             "COUNT(*) AS fleetsize"],
                            "GROUP BY inv.kill_id, ki.date "))
        hours = {}
        for (hour, count) in c.fetchall():
            hours.setdefault(hour, [])
            hours[hour].append(count)
        return [(hour, max(counts)) for (hour, counts) in hours.items()]

    def fetch_history_fleet_size(self, conn):
        c = conn.cursor()
        q = self.join("killinfo ki",
                      O("ki.id = inv.kill_id"))
        c.execute(*q.select(["DATE_TRUNC('day', ki.date) AS day",
                             "COUNT(*) AS fleetsize"],
                            "GROUP BY inv.kill_id, ki.date "))
        days = {}
        for day, fleetsize in c.fetchall():
            days.setdefault(day, 0)
            days[day] = max(fleetsize, days[day])
        return days.items()

    def fetch_hourly_capitals(self, conn):
        c = conn.cursor()
        q = self.join("killinfo ki",
                      O("ki.id = inv.kill_id"))
        q = q.join("ki_type kt",
                   O("inv.ship_id = kt.id"))
        q = q.join("ccp.invtypes t",
                   O("kt.externalid = t.typeid"))
        q = q.join("ccp.invgroups g",
                   O("t.groupid = g.groupid"))
        q = q.where(O("g.groupname IN ('Carrier', 'Dreadnought', "
                      "                'Supercarrier', 'Titan')"))
        c.execute(*q.select(["DATE_PART('hour', ki.date) AS hour",
                             "COUNT(*)"],
                            "GROUP BY inv.kill_id, "
                            "DATE_PART('hour', ki.date)"))
        hours = {}
        for (hour, count) in c.fetchall():
            hours.setdefault(hour, [])
            hours[hour].append(count)
        return [(hour, max(counts)) for (hour, counts) in hours.items()]

    def fetch_history_capitals(self, conn):
        c = conn.cursor()
        q = self.join("killinfo ki",
                      O("ki.id = inv.kill_id"))
        q = q.join("ki_type kt",
                   O("inv.ship_id = kt.id"))
        q = q.join("ccp.invtypes t",
                   O("kt.externalid = t.typeid"))
        q = q.join("ccp.invgroups g",
                   O("t.groupid = g.groupid"))
        q = q.where(O("g.groupname IN ('Carrier', 'Dreadnought', "
                      "                'Supercarrier', 'Titan')"))
        c.execute(*q.select(["DATE_TRUNC('day', ki.date) AS hour",
                             "COUNT(*)"],
                            "GROUP BY inv.kill_id, "
                            "DATE_TRUNC('day', ki.date)"))
        days = {}
        for (day, count) in c.fetchall():
            days.setdefault(day, [])
            days[day].append(count)
        return [(day, max(counts)) for (day, counts) in days.items()]

    def fetch_control_towers(self, conn):
        c = conn.cursor()
        q = self.join("ki_pilot invp",
                      O("inv.name_id = invp.id"))
        q = q.join("ccp.invtypes t",
                   O("invp.name = t.typename"))
        q = q.join("ccp.invgroups g",
                   O("t.groupid = g.groupid"))
        q = q.join("killinfo ki",
                   O("inv.kill_id = ki.id"))
        q = q.join("ki_system ksys",
                   O("ki.system_id = ksys.id"))
        q = q.where(O("inv.isnpc") &
                    O("g.groupname = 'Control Tower'"))
        c.execute(*q.select(["DISTINCT ksys.name"],
                            "ORDER BY ksys.name ASC"))
        return [x for (x,) in c.fetchall()]

    def fetch_allies(self, conn):
        c = conn.cursor()
        q = self.join("ki_involved inv2",
                      O("inv.kill_id = inv2.kill_id"))
        q = q.where(O("inv.id != inv2.id") &
                    O("NOT inv.isnpc") &
                    O("NOT inv2.isnpc") &
                    O("inv.name_id != inv2.name_id") &
                    O("inv.corp_id != inv2.corp_id") &
                    O("COALESCE(inv.alliance_id, -1) != "
                      "COALESCE(inv2.alliance_id, -2)") &
                    O("COALESCE(inv.faction_id, -1) != "
                      "COALESCE(inv2.faction_id, -2)")
                    )
        oq = (O("SELECT COALESCE(alliance.name, corp.name) AS name "
                "FROM (") +
              q.select(["DISTINCT inv.kill_id",
                        "inv2.corp_id", "inv2.alliance_id"],

                       ) +
              ") AS sq " +
              O("INNER JOIN ki_corp corp ON sq.corp_id = corp.id ") +
              O("LEFT JOIN ki_alliance alliance "
                "ON sq.alliance_id = alliance.id"))
        ooq = (O("SELECT COUNT(*) AS count, name "
                 "FROM (") + oq +
               O(") AS oq GROUP BY name "
                 "HAVING COUNT(*) > 1 "
                 "ORDER BY count DESC "))
        c.execute(*ooq)
        return ["%s (%s kills)" % (name, count)
                for (count, name) in c.fetchall()]

    def fetch_shiptypes(self, conn, shipnames):
        c = conn.cursor()
        q = self.join("ki_pilot invp",
                      O("inv.name_id = invp.id"))
        q = q.join("ki_type ship",
                   O("inv.ship_id = ship.id"))
        q = q.where("ship.name IN " + O(shipnames))
        c.execute(*q.select(["COUNT(*)", "MAX(ki.date)", "invp.name",
                             "ship.name"],
                            "GROUP BY invp.name, ship.name"))
        pilots = {}
        for count, last_seen, pilot, ship in c.fetchall():
            pilots.setdefault(pilot, [])
            pilots[pilot].append((count, ship, last_seen))
        pilots = pilots.items()
        pilots.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
        result = []
        for (pilot, ships) in pilots:
            ships.sort(reverse=True)
            result.append("%s (%s)" % (
                    pilot,
                    ", ".join(["%s x %s last on %s" %
                               (ship, count, last_seen)
                               for count, ship, last_seen in ships])))
        return result

class PilotQuery(Select):
    def __init__(self, from_=None, where=None, tables=[]):
        if from_ is None:
            from_ = "ki_pilot p"
            tables = ["ki_pilot p"]
        super(PilotQuery, self).__init__(from_, where, tables)

    def filter_factions(self, factions):
        if len(factions) == 0:
            return self
        q = self.join("ki_faction f",
                      O("p.faction_id = f.id"))
        return q.where("f.name IN " + O(factions))

    def filter_alliances(self, alliances):
        if len(alliances) == 0:
            return self
        q = self.join("ki_alliance a",
                      O("p.alliance_id = a.id"))
        return q.where("a.name IN " + O(alliances))

    def filter_corps(self, corps):
        if len(corps) == 0:
            return self
        q = self.join("ki_corp c",
                      O("p.corp_id = c.id"))
        return q.where("c.name IN " + O(corps))

    def filter_pilots(self, pilots):
        if len(pilots) == 0:
            return self
        return q.where("p.name IN " + O(pilots))

    def fetch_pilots(self, conn):
        c = conn.cursor()
        q = self.join("ki_corp c",
                      O("p.corp_id = c.id"))
        c.execute(*q.select(["p.name", "c.name", "p.last_seen"],
                            "ORDER BY LOWER(p.name) ASC"))
        return ["%s, %s (%s)" % (name, corp, last_seen)
                for (name, corp, last_seen) in c.fetchall()]

    def fetch_shiptypes(self, conn, shipnames):
        c = conn.cursor()
        q = self.join("ki_involved inv",
                      O("p.id = inv.name_id"))
        q = q.join("killinfo ki",
                   O("inv.kill_id = ki.id"))
        q = q.join("ki_type ship",
                   O("inv.ship_id = ship.id"))
        q = q.where("ship.name IN " + O(shipnames))
        c.execute(*q.select(["COUNT(*)", "MAX(ki.date)",
                             "p.name", "ship.name"],
                            "GROUP BY p.name, ship.name"))
        pilots = {}
        for count, last_seen, pilot, ship in c.fetchall():
            pilots.setdefault(pilot, [])
            pilots[pilot].append((count, ship, last_seen))
        pilots = pilots.items()
        pilots.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
        result = []
        for (pilot, ships) in pilots:
            ships.sort(reverse=True)
            result.append("%s (%s)" % (
                    pilot,
                    ", ".join(["%s x %s last on %s" %
                               (ship, count, last_seen)
                               for count, ship, last_seen in ships])))
        return result

                             

def median(lis):
    if len(lis) == 0:
        return 0
    lis = lis[:]
    lis.sort()
    if (len(lis) % 2) == 0:
        return (lis[len(lis) / 2 - 1] + lis[len(lis) / 2]) / 2.0
    else:
        return lis[len(lis) / 2]

def plural(count, singular, plural):
    if count == 1:
        return singular
    else:
        return plural

def cluster(conn, syslist, limit):
    scl = SystemClusterList(conn)
    for system, count in syslist:
        scl.add(system, count)
    return list(scl)[0:limit]

class SystemClusterList(object):
    def __init__(self, conn, maxjumps=3):
        self.systems = {'School Systems': SystemCluster("School systems")}
        self.maxjumps = maxjumps
        self.conn = conn
        c = conn.cursor()
        c.execute("SELECT f.solarsystemname, t.solarsystemname, f.security "
                  "FROM ccp.mapsolarsystemjumps j "
                  "     INNER JOIN ccp.mapsolarsystems f "
                  "       ON j.fromsolarsystemid = f.solarsystemid "
                  "     INNER JOIN ccp.mapsolarsystems t "
                  "       ON j.tosolarsystemid = t.solarsystemid")
        self.jumps = {}
        self.security = {}
        for f, t, fsec in c.fetchall():
            self.jumps.setdefault(f, [])
            self.jumps[f].append(t)
            self.security[f] = fsec

    def neighbors(self, system, maxjumps):
        neighbors = set()
        agenda = [(system, 0)]
        while len(agenda) > 0:
            here, jumps = agenda[0]
            agenda = agenda[1:]
            neighbors.add(here)
            if jumps < maxjumps:
                for next in self.jumps[here]:
                    agenda.append((next, jumps + 1))
        if self.security[system] < 0.45:
            return [system for system in neighbors
                    if self.security[system] < 0.45]
        else:
            return [system for system in neighbors
                    if self.security[system] >= 0.45]

    def add(self, system, count):
        if system in STARTER_SYSTEMS:
            self.systems['School Systems'].add(system, count)
            return
        if system in self.systems:
            raise RuntimeException("Adding system twice: %s" % system)
        candidates = []
        for neighbor in self.neighbors(system, self.maxjumps):
            if neighbor in self.systems:
                candidates.append(self.systems[neighbor])
        if len(candidates) == 0:
            sc = SystemCluster()
            sc.add(system, count)
            self.systems[system] = sc
        else:
            candidates.sort(lambda a, b: cmp(a.total, b.total),
                            reverse=True)
            candidates[0].add(system, count)

    def __iter__(self):
        result = self.systems.values()
        result.sort(lambda a, b: cmp(a.total, b.total),
                    reverse=True)
        for item in result:
            yield (str(item), item.total)
            
class SystemCluster(object):
    def __init__(self, name=None):
        self.name = name
        self.total = 0
        self.systems = {}

    def add(self, system, count):
        self.systems[system] = count
        self.total += count

    def __str__(self):
        systems = self.systems.items()
        systems.sort(lambda a, b: cmp(a[1], b[1]),
                     reverse=True)
        if self.name:
            name = self.name
        else:
            name = "%s area" % systems[0][0]
        return "%s (%s - %s)" % (name,
                                 self.total,
                                 ", ".join("%s %s" % (sysname, value)
                                           for (sysname, value)
                                           in systems))

if __name__ == '__main__':
    main()
