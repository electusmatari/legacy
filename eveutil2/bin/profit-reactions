#!/usr/bin/env python

import sys

import evelib.newdb as db
import emcom.gmi as gmi
from emcom import humane

conn = None

def main():
    global conn
    conn = db.connect()
    c = conn.cursor()
    reactions = get_reactions(c)
    index = gmi.current()
    profits = []
    for reaction in reactions:
        profit = reaction.profit(index)
        if profit is None:
            continue
        if "-v" in sys.argv:
            profit = profit / max(reaction.invol, reaction.outvol)
        profits.append((profit * 24 * 7, reaction.incost * 24 * 7, reaction))
    profits.sort(reverse=True)
    for profit, incost, reaction in profits:
        groupname = reaction.group
        groupname = groupname[:groupname.index(" ")]
        print "%15s %s (%s, %s m3, %s ISK)" % (
            humane(profit),
            reaction.name,
            groupname,
            humane(max(reaction.invol, reaction.outvol) * 24 * 7),
            humane_round(incost)
            )

def humane_round(isk):
    for unit, value in [("B", 1000000000),
                        ("M", 1000000),
                        ("K", 1000),
                        ("", 1)]:
        if isk >= value:
            return "%.1f %s" % (isk / float(value), unit)
    return "0"

def get_reactions(c):
    reactions = {}
    c.execute("SELECT rt.typename AS reactionname, "
              "       g.groupname AS reactiongroup, "
              "       pt.typename AS productname, "
              "       pt.volume AS productvolume, "
              "       r.quantity AS qty, "
              "       r.input AS isinput "
              "FROM ccp.invtypereactions r "
              "     INNER JOIN ccp.invtypes rt "
              "       ON r.reactiontypeid = rt.typeid "
              "     INNER JOIN ccp.invtypes pt "
              "       ON r.typeid = pt.typeid "
              "     INNER JOIN ccp.invgroups g "
              "       ON rt.groupid = g.groupid "
              "WHERE rt.published = 1 and pt.published = 1"
              )
    for row in c.fetchall():
        qty = row.qty * moonminingamount(row.productname)
        if row.reactionname not in reactions:
            reactions[row.reactionname] = Reaction(row.reactionname,
                                                   row.reactiongroup)
        if row.isinput:
            reactions[row.reactionname].addinput(row.productname,
                                                 qty,
                                                 row.productvolume)
        else:
            reactions[row.reactionname].addoutput(row.productname,
                                                  qty,
                                                  row.productvolume)
    return reactions.values()

class Reaction(object):
    def __init__(self, name, group):
        self.name = name
        self.group = group
        self.inputs = []
        self.outputs = []
        self.invol = 0
        self.outvol = 0
        self.incost = 0

    def addinput(self, typename, qty, volume):
        self.invol += qty * volume
        self.inputs.append((typename, qty))

    def addoutput(self, typename, qty, volume):
        self.outvol += qty * volume
        self.outputs.append((typename, qty))

    def profit(self, index):
        # print "%s: %s -> %s" % (self.name,
        #                         ", ".join("%ix %s" % (x[1], x[0])
        #                                   for x in self.inputs),
        #                         ", ".join("%ix %s" % (x[1], x[0])
        #                                   for x in self.outputs))
        isk = 0
        for name, qty in self.outputs:
            if name in index:
                isk += index[name].jita * qty
            else:
                refined = refine(name)
                if refined is None:
                    return None
                for rname, rqty in refined:
                    if rname not in index:
                        return None
                    isk += index[rname].jita * rqty * qty
        for name, qty in self.inputs:
            if name not in index:
                return None
            self.incost += index[name].jita * qty
            isk -= index[name].jita * qty
        return isk

def refine(name):
    c = conn.cursor()
    c.execute("SELECT mt.typename, tm.quantity "
              "FROM ccp.invtypematerials tm "
              "     INNER JOIN ccp.invtypes t "
              "       ON tm.typeid = t.typeid "
              "     INNER JOIN ccp.invtypes mt "
              "       ON tm.materialtypeid = mt.typeid "
              "WHERE t.typename = %s",
              (name,))
    if c.rowcount == 0:
        return None
    else:
        return c.fetchall()

moonamounts = None
def moonminingamount(name):
    global moonamounts
    if moonamounts is None:
        c = conn.cursor()
        c.execute("SELECT t.typename, coalesce(ta.valuefloat, ta.valueint) "
                  "FROM invtypes t, "
                  "     dgmtypeattributes ta, "
                  "     dgmattributetypes at "
                  "WHERE t.typeid = ta.typeid "
                  "  AND ta.attributeid = at.attributeid "
                  "  AND at.attributename = 'moonMiningAmount'")
        moonamounts = dict(c.fetchall())
    return moonamounts.get(name, 1)
    

if __name__ == '__main__':
    main()
