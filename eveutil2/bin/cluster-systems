#!/usr/bin/env python

import evelib.newdb as db
import sys

DISTRIBUTION = [1, 0.75, 0.45, 0.25, 0.15, 0.05]
# DISTRIBUTION = [1.0/(2**x) for x in range(1, 20)]
# import math
# def normal(x, a, b=0, c=0):
#     return math.e ** (a * (x**2) + b * x + c)
# DISTRIBUTION = [normal(x, -0.15) for x in range(20)]

def main():
    conn = db.connect()
    c = conn.cursor()
    jumps, sysmap = initialize(c)
    secstatus = get_security(c)
    values = get_values()

    for sysname in values.keys():
        if secstatus[sysname] >= 0.45:
            values[sysname] *= 0.1

    distribute(values, jumps, sysmap)

    # for sysname in sysmap.keys():
    #     if secstatus[sysname] >= 0.45:
    #         sysmap[sysname] *= 0.1

    sysmap = merge(sysmap, jumps)
    syslist = sysmap.items()    
    syslist.sort(lambda a, b: cmp((a[1], b[0]), (b[1], a[0])),
                 reverse=True)
    for name, count in syslist:
        if count > 0:
            print "%10.2f %s" % (count, name)

def get_values():
    result = {}
    for line in sys.stdin:
        line = line.strip()
        (v, n) = line.split(None, 1)
        result.setdefault(n, 0)
        result[n] += int(v)
    return result

def get_security(c):
    c.execute("SELECT solarsystemname, security "
              "FROM ccp.mapsolarsystems")
    return dict(c.fetchall())

def initialize(c):
    c.execute("SELECT f.solarsystemname, t.solarsystemname "
              "FROM ccp.mapsolarsystemjumps j "
              "     INNER JOIN ccp.mapsolarsystems f "
              "       ON j.fromsolarsystemid = f.solarsystemid "
              "     INNER JOIN ccp.mapsolarsystems t "
              "       ON j.tosolarsystemid = t.solarsystemid")
    sysmap = {}
    jumps = {}
    for f, t in c.fetchall():
        sysmap[f] = 0
        sysmap[t] = 0
        jumps.setdefault(f, [])
        jumps[f].append(t)
    return jumps, sysmap

def get_neighbors(start, jumps, max_distance):
    agenda = [(start, [start])]
    result = [(start, [start])]
    visited = set([start])
    while len(agenda) > 0:
        (here, route) = agenda[0]
        agenda = agenda[1:]
        for neighbor in jumps[here]:
            if neighbor in visited:
                continue
            visited.add(neighbor)
            new_route = route + [neighbor]
            if len(new_route) > max_distance:
                continue
            result.append((neighbor, new_route))
            agenda.append((neighbor, new_route))
    return result

def distribute(values, jumps, sysmap):
    for sysname, val in values.items():
        neighbors = get_neighbors(sysname, jumps, len(DISTRIBUTION))
        for neighbor, route in neighbors:
            distance = len(route)
            sysmap[neighbor] += val * DISTRIBUTION[distance - 1]

def merge(sysmap, jumps):
    sysmap = sysmap.copy()
    syslist = sysmap.items()
    syslist.sort(lambda a, b: cmp(a[1], b[1]))
    for sysname, score in syslist:
        for neighbor in jumps[sysname]:
            if score < sysmap.get(neighbor, 0):
                # print "%s (%s) => %s (%s)" % (
                #     sysname, score, neighbor, sysmap.get(neighbor, 0))
                del sysmap[sysname]
                break
    return sysmap

if __name__ == '__main__':
    main()
