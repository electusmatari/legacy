#!/usr/bin/env python

import csv
import StringIO
import sys

import twf.db as db
import emcom.ftp as ftp
import evelib.api as api
import evelib.db.industry as industry

from evelib.db import *

LOCALFILE = "/home/forcer/public_html/eve/grd-pricelist.txt"

# Add extra blueprints we can't find via assets
EXTRABLUEPRINTS = []

def main():
    products = getproduceable()
    products.extend(getfactionammo())
    products.sort(lambda a, b: cmp(a.typename, b.typename))
    # prices = evemetrics.get_prices([product.typename for product in products],
    # ["Heimatar", "The Forge"])

    iconf = IndustryConfig()
    s = StringIO.StringIO()
    w = csv.writer(s)
    c = db.cursor('dbeve')
    for product in products:
        try:
            if hasattr(product, 'cost'):
                productioncost = product.cost
            else:
                try:
                    productioncost = industry.cost(product, iconf)
                except:
                    print "Can't get cost for %s" % product.typename
                    productioncost = 0
        except RuntimeError:
            pass
        else:
            # p = prices[product.typename]
            heim = 0 # p.index(regions=["Heimatar"])
            heimmov = 0 # p.movement(regions=["Heimatar"])
            jita = 0 # p.index(regions=["The Forge"])
            last = {} # p.last_upload()
            w.writerow([product.typename, productioncost,
                        heim, heimmov, jita, last.get('Heimatar',
                                                      '1970-01-01 00:00:00')])
    #s.seek(0)
    #ftp.upload("grd-pricelist.txt", s)
    s.seek(0)
    file(LOCALFILE, "w").write(s.read())

def getproduceable():
    blueprints = getblueprints()
    result = []
    for bp in blueprints:
        if not bp.blueprinttype.published or not bp.producttype.published:
            continue
        mgroups = [x.marketgroupname for x in bp.producttype.marketgroups]
        # Gradient does not produce ships of Amarrian design
        if 'Amarr' in mgroups and 'Ships' in mgroups:
            continue
        # No T2 salvage
        if 'Rigs' in mgroups and bp.producttype.attribute("techLevel") == 2:
            continue
        # No compressed ore or ice
        if bp.blueprinttype.group.groupname in ('Ore Compression Blueprints',
                                                'Ice Compression Blueprints'):
            continue
        # Special starbase modules, boosters and anchorable equipment
        # is also excluded.
        if bp.producttype.group.category.categoryname in ('Implant',
                                                          'Celestial'):
            continue
        # No COSMOS blueprints, either
        if bp.producttype.metagroup in ('Storyline',):
            continue
        result.append(bp.producttype)
    result.sort(lambda a, b: cmp(a.typename, b.typename))
    return result

def getblueprints():
    blueprints = {}
    grd = api.corp()
    assets = grd.AssetList()
    getassetblueprints(blueprints, assets.assets)
    c = db.cursor('dbeve')
    c.execute("SELECT t.typename "
              "FROM ccp.invtypes t "
              "     INNER JOIN ccp.invgroups g "
              "       ON t.groupid = g.groupid "
              "     INNER JOIN ccp.invcategories c "
              "       ON g.categoryid = c.categoryid "
              "WHERE g.groupname IN ('Strategic Cruiser Blueprints', "
              "                      'Subsystem Blueprints')"
              "  AND t.typename NOT LIKE 'Legion%%'")
    for name in EXTRABLUEPRINTS + [row[0] for row in c.fetchall()]:
        t = invTypes.get(db.cursor('dbeve'), 'typename', name)
        bp = invBlueprintTypes.get(db.cursor('dbeve'),
                                   'blueprinttypeid',
                                   t.typeid)
        blueprints[bp.blueprinttypeid] = bp
    jobs = grd.IndustryJobs()
    getindustryblueprints(blueprints, jobs.jobs)
    getinventionblueprints(blueprints, blueprints.values())
    return blueprints.values()

def getassetblueprints(result, assets):
    for row in assets:
        if row.typeID not in result:
            try:
                bptype = invBlueprintTypes.get(db.cursor('dbeve'),
                                               'blueprinttypeid',
                                               row.typeID)
            except RowDoesNotExistError:
                pass
            else:
                if bptype.producttype.published:
                    result[bptype.blueprinttypeid] = bptype
        if hasattr(row, 'contents'):
            getassetblueprints(result, row.contents)

def getindustryblueprints(result, jobs):
    for row in jobs:
        typeid = row.installedItemTypeID
        if typeid not in result:
            try:
                result[typeid] = invBlueprintTypes.get(db.cursor('dbeve'),
                                                       'blueprinttypeid',
                                                       typeid)
            except RowDoesNotExistError:
                pass

def getinventionblueprints(result, blueprints):
    for bp in blueprints:
        for invbp in bp.inventionblueprints:
            typeid = invbp.blueprinttypeid
            if typeid not in result:
                result[typeid] = invbp

def getfactionammo():
    c = db.cursor('dbeve')
    c.execute("SELECT t.typename, "
              "       mt2.typename, "
              "       COALESCE(ta.valuefloat, ta.valueint) "
              "FROM ccp.invtypes t "
              "     INNER JOIN ccp.invgroups g ON t.groupid = g.groupid "
              "     INNER JOIN ccp.invmetatypes mt1 ON t.typeid = mt1.typeid "
              "     INNER JOIN ccp.invtypes mt2 "
              "       ON mt1.parenttypeid = mt2.typeid "
              "     INNER JOIN ccp.dgmtypeattributes ta "
              "       ON t.typeid = ta.typeid "
              "     INNER JOIN ccp.dgmattributetypes at "
              "       ON ta.attributeid = at.attributeid "
              "WHERE g.groupname = 'Ammo' "
              "  AND t.typename LIKE 'Republic Fleet %%' "
              "  AND t.typename NOT LIKE '%% XL' "
              "  AND at.attributename = 'chargeSize'")
    iconf = IndustryConfig()
    result = []
    for ammotypename, basetypename, size in c.fetchall():
        baseammo = invTypes.get(db.cursor('dbeve'), 'typename', basetypename)
        productioncost = industry.cost(baseammo, iconf)
        # size: 1 = S, 2 = M, 3 = L
        sizeprice = [None, 480, 640, 960]
        result.append(DirectProduct(ammotypename,
                                    sizeprice[int(size)] + productioncost))
    return result

class DirectProduct(object):
    def __init__(self, typename, cost):
        self.typename = typename
        self.cost = cost

class IndustryConfig(object):
    def __init__(self, decryptor=None):
        self._index = None
        self.decryptor = decryptor
        if decryptor is None:
            self.decryptor = industry.NoDecryptor()

    def index(self, invtype):
        if self._index is None:
            self._index = {}
            f = file("/home/forcer/public_html/eve/gmi/current.txt")
            lines = list(csv.reader(f))[1:]
            for row in lines:
                if row[1] != '':
                    self._index[row[0]] = float(row[1])
        return self._index.get(invtype.typename, None)

    def get_blueprint(self, invtype):
        tl = int(invtype.attribute("techLevel") or 1.0)
        if tl == 1:
            return self.t1blueprint(invtype)
        elif tl == 2:
            return self.t2blueprint(invtype)
        elif tl == 3:
            return self.t3blueprint(invtype)
        else:
            raise RuntimeError("Unknown tech level %s for %s" %
                               (tl, invtype.typename))

    def t1blueprint(self, invtype):
        group = invtype.group.groupname
        cat = invtype.group.category.categoryname
        if invtype.typename == 'Noctis':
            return industry.Blueprint(me=1)
        if group in ['Industrial Command Ship', 'Carrier', 'Dreadnought',
                     'Capital Industrial Ship']:
            return industry.Blueprint(me=2,
                                      safetymargin=self.safetymargin(invtype))
        elif cat in ['Module', 'Charge', 'Drone', 'Commodity']:
            return industry.Blueprint(me=40,
                                      safetymargin=self.safetymargin(invtype))
        elif cat in ['Ship', 'Deployable']:
            return industry.Blueprint(me=10,
                                      safetymargin=self.safetymargin(invtype))
        elif cat in ['Structure']:
            return industry.Blueprint(me=10, safetymargin=1.0)
        else:
            raise RuntimeError("No ME for category %s (%s)" %
                               (cat, invtype.typename))

    t2bpos = {"Claymore":
                  industry.Blueprint(me=5, safetymargin=1.1),
              "Dual 180mm AutoCannon II":
                  industry.Blueprint(me=8, safetymargin=1.2),
              "425mm AutoCannon II":
                  industry.Blueprint(me=90, safetymargin=1.2),
              "1200mm Artillery Cannon II":
                  industry.Blueprint(me=52, safetymargin=1.2),
              "Aurora M": industry.Blueprint(me=3, safetymargin=1.5),
              "Barrage S": industry.Blueprint(me=0, safetymargin=1.5),
              "Barrage L": industry.Blueprint(me=0, safetymargin=1.5),
              "Quake M": industry.Blueprint(me=0, safetymargin=1.5),
              "Tremor S": industry.Blueprint(me=0, safetymargin=1.5),
              "Tremor M": industry.Blueprint(me=1, safetymargin=1.5),
              "Havoc Fury Heavy Missile":
                  industry.Blueprint(me=0, safetymargin=1.5)}
    def t2blueprint(self, invtype):
        if invtype.typename in self.t2bpos:
            return self.t2bpos[invtype.typename]
        return industry.InventedBlueprint(invtype,
                                          self.safetymargin(invtype),
                                          self.decryptor)

    def t3blueprint(self, invtype):
        return industry.ReverseEngineeredBlueprint(invtype,
                                                   self.safetymargin(invtype))

    def safetymargin(self, invtype):
        tl = int(invtype.attribute("techLevel") or 1.0)
        if tl == 1:
            group = invtype.group.groupname
            if group in ['Carrier']:
                return 1.2
            elif group in ['Dreadnought']:
                return 1.1
            elif group in ['Industrial Command Ship',
                           'Capital Industrial Ship']:
                return 1.11
            else:
                return 1.0
        elif tl == 2:
            cat = invtype.group.category.categoryname
            if cat == 'Charge':
                return 1.5
            elif invtype.typename in ['Covert Ops Cloaking Device II',
                                      'Improved Cloaking Device II']:
                return 2.5
            else:
                return 1.2
        elif tl == 3:
            return 1.15
        else:
            raise RuntimeError('Unknown tech level %s (%s)' %
                               (tl, invtype.typename))

if __name__ == '__main__':
    main()
