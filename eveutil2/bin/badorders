#!/usr/bin/env python

import csv

import emcom.gmi as gmi
import evelib.api as api
import evelib.newdb as db
import evelib.util as util

PRICELIST = "/home/forcer/public_html/eve/grd-pricelist.txt"

def main():
    grd = api.corp()
    orders = grd.MarketOrders().orders
    prices = gmi.current()
    prices.update(dict([(x[0], float(x[1]))
                        for x in csv.reader(file(PRICELIST))]))

    print "Buy Orders"
    print "=========="
    print_orders([order for order in orders if
                  order.orderState == 0 and
                  order.accountKey in (1000, 1001, 1002) and
                  order.bid == 1 and 
                  order.price > prices.get(typeid2name(order.typeID), 0)],
                 prices)
    print
    print "Sell Orders"
    print "==========="
    print_orders([order for order in orders if
                  order.orderState == 0 and
                  order.accountKey in (1000, 1001, 1002) and
                  order.bid == 0 and 
                  order.price < prices.get(typeid2name(order.typeID), 0)],
                 prices)

def print_orders(orders, prices):
    orders = list(orders)
    orders.sort(lambda a, b: cmp(charid2name(a.charID),
                                 charid2name(b.charID)))
    for order in orders:
        if order.bid == 1:
            station = ("%s/%s" % (
                    staid2name(order.stationID),
                    "region" if order.range == 32767 else order.range))
        else:
            station = staid2name(order.stationID)
        print("%s (%s) %s %s at %s, index is at %s" %
              (charid2name(order.charID),
               station,
               "buys" if order.bid == 1 else "sells",
               typeid2name(order.typeID),
               util.humane(order.price),
               util.humane(prices.get(typeid2name(order.typeID), 0))))

_charids = {}
def charid2name(charid):
    if charid not in _charids:
        apiconn = api.api()
        result = apiconn.eve.CharacterInfo(characterID="%s" % charid)
        _charids[charid] = result.characterName
    return _charids[charid]

_types = None
def typeid2name(typeid):
    global _types
    if _types is None:
        conn = db.connect()
        c = conn.cursor()
        c.execute("SELECT typeid, typename FROM ccp.invtypes")
        _types = dict(c.fetchall())
    return _types.get(typeid, "<typeID %i>" % typeid)

_stations = None
def staid2name(staid):
    global _stations
    if _stations is None:
        conn = db.connect()
        c = conn.cursor()
        c.execute("SELECT stationid, stationname FROM ccp.stastations")
        _stations = dict(c.fetchall())
    return _stations.get(staid, "<stationID %i>" % staid)


if __name__ == '__main__':
    main()
