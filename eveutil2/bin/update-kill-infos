#!/usr/bin/env python

# http://scone.griefwatch.net/
# http://dass.griefwatch.net/
# http://somethingrotten.griefwatch.net/
# http://brco.griefwatch.net/
# http://freex.griefwatch.net/
# http://evebroadside.griefwatch.net/
# http://mugen.griefwatch.net/
# http://rsf.griefwatch.net/
# http://brco.griefwatch.net/
# http://ignis.griefwatch.net
# http://killboard.drunk-gang.com/

import os
import sys
import tempfile
import logging
import traceback

import sdb
import evelib.killboards.edk as edk
import evelib.killboards.griefwatch as gw
import evelib.killboards.battleclinic as bc
import evelib.killboards.evsco as evsco
import evelib.killinfo as killinfo
import evelib.newdb as db

log = logging.getLogger('main')

def main():
    logging.basicConfig(level=logging.INFO,
                        format="%(asctime)s %(levelname)s %(message)s")
    log.info("Starting kill info retrieval")
    conn = db.connect()
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM killinfo")
    startcount = c.fetchone()[0]
    totalcount = 0
    sql = "SELECT id, type, url, lastkillid FROM killboard_feeds"
    if len(sys.argv) > 1:
        c.execute(sql + " WHERE id IN (%s)" %
                  ", ".join(["%s"] * (len(sys.argv) - 1)),
                  sys.argv[1:])
    else:
        c.execute(sql)

    for row in c.fetchall():
        try:
            if row.type == 'edk':
                lastkillid, count = get_edk(c, row.url, row.lastkillid)
            elif row.type == 'evsco':
                lastkillid, count = get_evsco(c, row.url, row.lastkillid)
            elif row.type == 'griefwatch':
                lastkillid, count = get_gw(c, row.url, row.lastkillid)
            elif row.type == 'battleclinic':
                lastkillid, count = get_bc(c, row.url, row.lastkillid)
            else:
                raise RuntimeException("Bad feed type %r" % type)
        except:
            log.info("Error while reading feed %s:\n%s" %
                     (row.url, traceback.format_exc()))
            continue
        # if count == 0 or count >= 100:
        #     log.info("Read %s kill infos from feed %s" %
        #              (count, row.url))
        totalcount += count
        if lastkillid > 0 and (row.lastkillid is None or lastkillid > row.lastkillid):
            c.execute("UPDATE killboard_feeds "
                      "SET lastkillid = %s, "
                      "    last_updated = NOW() "
                      "WHERE id = %s",
                      (lastkillid, row.id))
        conn.commit()
    c.execute("SELECT COUNT(*) FROM killinfo")
    endcount = c.fetchone()[0]
    log.info("Fetched a total of %s kill infos, resulting in %s new entries" %
             (totalcount, endcount - startcount))

def get_edk(c, url, lastkillid):
    try:
        (newlastkillid, killinfos) = edk.getfeed(url, lastkillid)
    except Exception as e:
        log.warning("Error %s fetching %s: %s" %
                    (e.__class__.__name__, url, str(e)))
        return 0, 0
    for ki in killinfos:
        try:
            killinfo.add_killinfo(c, ki, url)
        except KeyError:
            (fd, fname) = tempfile.mkstemp(prefix="killinfo-",
                                           suffix=".txt")
            f = os.fdopen(fd, "w")
            f.write(ki)
            f.close()
            log.warning("Error adding kill info from %s in %s" %
                        (url, fname))
    return newlastkillid, len(killinfos)

def get_evsco(c, url, lastkillid):
    try:
        (newlastkillid, killinfos) = evsco.getfeed(url, lastkillid)
    except Exception as e:
        log.warning("Error %s fetching %s: %s" %
                    (e.__class__.__name__, url, str(e)))
        return 0, 0
    for ki in killinfos:
        try:
            killinfo.add_killinfo(c, ki, url)
        except KeyError:
            (fd, fname) = tempfile.mkstemp(prefix="killinfo-",
                                           suffix=".txt")
            f = os.fdopen(fd, "w")
            f.write(ki)
            f.close()
            log.warning("Error adding kill info from %s in %s" %
                        (url, fname))
    return newlastkillid, len(killinfos)
    
def get_gw(c, url, lastkillid):
    raise RuntimeException("Griefwatch not implemented yet")

def get_bc(c, url, lastkillid):
    try:
        (newlastkillid, killinfos) = bc.getrepublic(lastkillid)
    except Exception:
        log.exception("Error while fetching from battleclinic")
        return 0, 0
    for ki in killinfos:
        try:
            killinfo.add_killinfo(c, ki, url)
        except KeyError:
            (fd, fname) = tempfile.mkstemp(prefix="killinfo-",
                                           suffix=".txt")
            f = os.fdopen(fd, "w")
            f.write(ki)
            f.close()
            log.warning("Error adding kill info from %s in %s" %
                        (url, fname))
    return newlastkillid, len(killinfos)

if __name__ == '__main__':
    main()

# CREATE TABLE killboard_feeds (
#     id SERIAL PRIMARY KEY,
#     type VARCHAR(255) NOT NULL,
#     url VARCHAR(255) NOT NULL,
#     lastkillid INT
# );

