#!/usr/bin/env python

import datetime
import evelib.api as api
import evelib.eveapi as eveapi
import evelib.newdb as db

def main():
    # theapi = api.api()
    # Ignore caching
    theapi = eveapi.EVEAPIConnection()
    kills = theapi.map.Kills()
    jumps = theapi.map.Jumps()
    fw = theapi.map.FacWarSystems()
    systems = {}
    timestamp = datetime.datetime.utcfromtimestamp(kills.dataTime)
    for row in kills.solarSystems:
        sysid = row.solarSystemID
        systems.setdefault(sysid, {})
        systems[sysid]['shipKills'] = row.shipKills
        systems[sysid]['factionKills'] = row.factionKills
        systems[sysid]['podKills'] = row.podKills
    for row in jumps.solarSystems:
        sysid = row.solarSystemID
        systems.setdefault(sysid, {})
        systems[sysid]['shipJumps'] = row.shipJumps
    for row in fw.solarSystems:
        sysid = row.solarSystemID
        systems.setdefault(sysid, {})
        systems[sysid]['occupyingFactionID'] = row.occupyingFactionID
        systems[sysid]['contested'] = row.contested
    conn = db.connect()
    c = conn.cursor()
    c.execute("SELECT solarsystemid FROM historic_map "
              "WHERE timestamp = %s",
              (timestamp,))
    known_systems = set([x for (x,) in c.fetchall()])
    for sysid, data in systems.items():
        if sysid in known_systems:
            continue
        c.execute("INSERT INTO historic_map (timestamp, solarsystemid, "
                  "    shipkills, factionkills, podkills, shipjumps, "
                  "    occupyingfactionid, contested) "
                  "VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
                  (timestamp, sysid,
                   data.get('shipKills', 0),
                   data.get('factionKills', 0),
                   data.get('podKills', 0),
                   data.get('shipJumps', 0),
                   data.get('occupyingFactionID', None),
                   data.get('contested', None)))
    conn.commit()

if __name__ == '__main__':
    main()
