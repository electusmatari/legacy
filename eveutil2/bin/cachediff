#!/usr/bin/env python

import os
import sys

from reverence.blue import marshal
from reverence import const

def main():
    program, d1, d2 = sys.argv
    m1 = load_dir(d1)
    m2 = load_dir(d2)
    print_diff(diff(d1, d2))

def load_dir(dirname):
    info = CacheInfo()
    load_resui(info, os.path.join(dirname, "resui.stuff"))
    load_cache_dir(info, os.path.join(dirname, "bulkdata"))
    cachedir = get_cache_dir(dirname)
    load_cache_dir(info, os.path.join(cachedir, 'CachedMethodCalls'))
    return info

def load_resui(info, filename):
    # FIXME!
    pass

def load_cache_dir(info, dirname):
    for fname in os.listdir(dirname):
        if fname == 'version':
            continue
        filename = os.path.join(dirname, fname)
        data = marshal.Load(file(filename).read())
        if filename.endswith(".cache2"):
            category = cache2category(fname)
            rowset = data
        else:
            category = ".".join(str(x) for x in data[0])
            rowset = data[1]['lret']
        if category not in CATEGORIES:
            continue
        idcol, namecol = CATEGORIES[category]
        info.add_rowset(category, rowset)

def cache2category(fname):
    basename = os.path.splitext(fname)[0]
    for k, v in const.__dict__.items():
        if str(v) == fname:
            return k
    return None

CATEGORIES = set(
    [
     ])

def get_cache_dir(dirname):
    ip_list = os.listdir(os.path.join(dirname, "cache/MachoNet"))
    if "87.237.38.50" in ip_list: # SiSi
        server_dir = os.path.join(dirname, "cache/MachoNet/87.237.38.50")
    else:
        server_dir = os.path.join(dirname, "cache/MachoNet", ip_list[0])
    verdir = str(max(int(name) for name in os.listdir(server_dir)))
    return os.path.join(server_dir, verdir)


def get_idname(category, header):
    if category == 'account.GetKeyMap':
        return None
    raise RuntimeError("Unknown category %s with header %r" %
                       (category, header))

def get_header(rowset):
    if hasattr(rowset, 'header'):
        if hasattr(rowset.header, 'Keys'):
            return rowset.header.Keys()
    raise RuntimeError("Don't know how to get the header for an object "
                       "of type %s (%r)" % (type(rowset), dir(rowset)))

class CacheInfo(object):
    # category -> obj_id -> obj_info
    def __init__(self):
        self.categories = {}

    def add_rowset(self, category, rowset, idcol, namecol):
        self.categories.setdefault(category, {})
        header = get_header(rowset)
        for row in rowset:
            d = zip(header, row)
            obj = CacheObject(d[idcol], d[namecol], d)
            self.categories[obj.id] = obj

class CacheObject(object):
    def __init__(self, id, name, attributes):
        self.id = id
        self.name = name
        self.attributes = attributes


# if __name__ == '__main__':
#     main()
