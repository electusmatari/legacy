#!/usr/bin/env python

import urllib
import xml.etree.ElementTree as ET
import re
import sys

import evelib.newdb as db
import evelib.api as api

def main():
    apiroot = api.api()
    # Kill DB
    conn = db.connect()
    c = conn.cursor()
    c.execute("SELECT c.name FROM ki_corp c "
              "       INNER JOIN ki_faction f ON c.faction_id = f.id "
              "WHERE f.name = 'Amarr Empire' "
              "  AND c.last_seen > NOW() - INTERVAL '84 days' "
              "ORDER BY LOWER(c.name) ASC")
    names = set([name for (name,) in c.fetchall()])
    sys.stderr.write("Found %s names in the database\n" % len(names))

    # Get standings
    tree = ET.parse(urllib.urlopen("http://www.electusmatari.com/standings/?format=xml"))
    hostiles = set([elt.find("entity").text for elt in tree.findall("standing")
                    if elt.find("value").text == '-10'])

    # Get important corps
    importantids = {}
    fwts = apiroot.eve.FacWarTopStats()
    importantids.update([(row.corporationID, 'kills yesterday')
                         for row in fwts.corporations.KillsYesterday])
    importantids.update([(row.corporationID, 'kills last week')
                         for row in fwts.corporations.KillsLastWeek])
    importantids.update([(row.corporationID, 'kills total')
                         for row in fwts.corporations.KillsTotal])
    importantids.update([(row.corporationID, 'vp yesterday')
                         for row in fwts.corporations.VictoryPointsYesterday])
    importantids.update([(row.corporationID, 'vp last week')
                         for row in fwts.corporations.VictoryPointsLastWeek])
    importantids.update([(row.corporationID, 'vp total')
                         for row in fwts.corporations.VictoryPointsTotal])

    importantnames = dict([(name, 'kb') for name in get_amarrkb()] +
                          [(name, 'pilot in topstats')
                           for name in get_fwpilots(fwts, conn)])

    # Get their IDs
    corpids = get_corpids(list(names))
    sys.stderr.write("Removing %s as disbanded or erraneous\n" %
                     (len(names) - len(corpids)))

    # Get alliance corporations
    alliance_corps = set()
    for ally in apiroot.eve.AllianceList().alliances:
        alliance_corps.update([corp.corporationID for corp in ally.memberCorporations])
    sys.stderr.write("Removing %s as being in an alliance\n" %
                     len(set(corpids.values()) & alliance_corps))

    amarr = []
    for corpname, corpid in corpids.items():
        if corpid in alliance_corps:
            continue
        try:
            corp = apiroot.corp.CorporationSheet(corporationID=corpid)
        except:
            sys.stderr.write("Error retrieving corp info for %s (%s)\n" %
                             (corpname, corpid))
            continue
        amarr.append({'id': corpid,
                      'name': corpname,
                      'ticker': corp.ticker,
                      'size': corp.memberCount})

    amarr.sort(key=lambda c: (c['size'], c['name'].lower()),
               reverse=True)

    # Print the rest
    print "<html><body><ol>"
    for corp in amarr:
        info = ["%s members" % corp['size']]
        if corp['name'] in hostiles:
            continue
            info.append("-10")
        if corp['id'] in importantids:
            info.append(importantids[corp['id']])
        elif corp['name'] in importantnames:
            info.append(importantnames[corp['name']])
        elif corp['size'] < 10:
            # continue
            pass
        print ('<li><a href="" onclick="CCPEVE.showInfo(2, %s);return false;">%s [%s]</a> (%s)</li>' %
               (corp['id'], corp['name'], corp['ticker'], ", ".join(info)))
    print "</ol></body></html>"
    sys.stderr.write("Written.\n")

def get_corpids(names):
    apiroot = api.api()
    result = {}
    n = 0
    per_run = 250
    while len(names) > 0:
        n += per_run
        sys.stderr.write("Looking up %s names ... " % n)
        this = names[:per_run]
        names = names[per_run:]
        try:
            result.update((entry.name, entry.characterID)
                          for entry
                          in apiroot.eve.CharacterID(names=",".join(this)).characters
                          if entry.characterID != 0)
            sys.stderr.write("ok.\r")
        except api.eveapi.Error:
            sys.stderr.write("\nError retrieving %s\n" % ",".join(this))
    sys.stderr.write("\n")
    return result


AMARR_CORP_RX = re.compile(r'<a href="\?a=corp_detail\&amp;crp_id=[0-9]+">(.*?)</a>')
def get_amarrkb():
    data = urllib.urlopen("http://www.amarr-empire.net/killboard/?a=alliance_detail&all_id=499&view=corp_kills").read()
    return AMARR_CORP_RX.findall(data)

def get_fwpilots(fwts, conn):
    result = set()
    c = conn.cursor()
    for charlist in [fwts.characters.KillsYesterday,
                     fwts.characters.KillsLastWeek,
                     fwts.characters.KillsTotal,
                     fwts.characters.VictoryPointsYesterday,
                     fwts.characters.VictoryPointsLastWeek,
                     fwts.characters.VictoryPointsTotal]:
        for char in charlist:
            try:
                result.add(char2corp(c, char.characterName))
            except:
                pass
    return result

def char2corp(c, charname):
    c.execute("SELECT c.name FROM ki_pilot p INNER JOIN ki_corp c "
              "ON p.corp_id = c.id WHERE p.name = %s", (charname,))
    return c.fetchone()[0]

main()
