#!/usr/bin/env python

import datetime
import gzip
import optparse

import evelib.newdb as db
import evelib.eveapi as eveapi
import evelib.api as api
from evelib.util import humane

conn = db.connect()

def main():
    parser = optparse.OptionParser()
    (options, args) = parser.parse_args()
    old, oldtime = parse(gzip.GzipFile(args[0]))
    new, newtime = parse(gzip.GzipFile(args[1]))
    newmap = {}
    for item in new:
        newmap[item.itemid] = item

    locations = {}
    for item in old:
        locations.setdefault(item.rootlocation(),
                             {'added': [],
                              'removed': [],
                              'moved': [],
                              'changed': []})
        loc = locations[item.rootlocation()]
        if item.itemid not in newmap:
            loc['removed'].append(item)
            continue
        newitem = newmap[item.itemid]
        del newmap[item.itemid]
        if item.samelocation(newitem):
            if item.quantity != newitem.quantity:
                loc['changed'].append((item, newitem))
            continue
        loc['moved'].append((item, newitem))
    for item in newmap.values():
        locations.setdefault(item.rootlocation(),
                             {'added': [],
                              'removed': [],
                              'moved': [],
                              'changed': []})
        loc = locations[item.rootlocation()]
        loc['added'].append(item)
    print "Diff of assets between %s and %s" % (
        oldtime.strftime("%Y-%m-%d %H:%M:%S"),
        newtime.strftime("%Y-%m-%d %H:%M:%S"))
    print
    locs = [("%s / %s" % (locationname(locid),
                          flagname(flagid)),
             diff)
            for ((locid, flagid), diff) in locations.items()]
    locs.sort()
    for locname, loc in locs:
        if max([len(x) for x in loc.values()]) == 0:
            continue
        print "* %s" % locname
        print "** ADDED:"
        for item in loc['added']:
            print "- %s" % item.description_without_root()
        print "** REMOVED:"
        for item in loc['removed']:
            print "- %s" % item.description_without_root()
        print "** CHANGED:"
        for old, new in loc['changed']:
            print "- %s -> %s (%s%s)" % (old.description_without_root(),
                                         humane(new.quantity),
                                         "+" if new.quantity > old.quantity else "",
                                         humane(new.quantity - old.quantity))
        print "** MOVED:"
        for old, new in loc['moved']:
            print "- %s" % old.description_without_root()
            print "  -> %s" % str(new)
        print

def parse(stream):
    data = eveapi._Parser().Parse(stream, True)
    timestamp = datetime.datetime.utcfromtimestamp(data.currentTime)
    return unfold(data.result.assets), timestamp

def unfold(rows, container=None):
    result = []
    for row in rows:
        item = Item(row.itemID, row.typeID, row.quantity, row.flag,
                    row.singleton, container=container)
        result.append(item)
        if hasattr(row, 'locationID'):
            item.locationid = row.locationID
        if hasattr(row, 'contents'):
            contents = unfold(row.contents, item)
            item.contents = contents
            result.extend(contents)
    return result

class DiffTuple(object):
    def __init__(self, itemid, old=None, new=None):
        self.itemid = itemid
        self.old = old
        self.new = new

class Item(object):
    def __init__(self, itemid, typeid, quantity, flag, singleton,
                 locationid=None, contents=None, container=None):
        self.itemid = itemid
        self.typeid = typeid
        self.quantity = quantity
        self.flag = flag
        self.singleton = singleton
        self.locationid = locationid
        if contents is None:
            self.contents = []
        else:
            self.contents = contents
        self.container = container

    def description_without_root(self):
        desc = str(self)
        if "/" in desc:
            return desc[desc.index(" / ") + 3:]
        elif ":" in desc:
            return desc[desc.index(": ") + 2:]
        else:
            return desc

    def __str__(self):
        desc = ""
        if self.container is not None:
            desc += str(self.container) + " / "
        if self.locationid is not None:
            desc += "%s" % locationname(self.locationid)
            if self.flag != 0:
                desc += " (%s)" % flagname(self.flag)
            desc += ": "
        elif self.flag != 0:
            desc += "%s: " % flagname(self.flag)
        if self.singleton:
            desc += "%s (assembled)" % typename(self.typeid)
        else:
            desc += "%s %s" % (typename(self.typeid),
                               humane(self.quantity))
        return desc

    def rootlocation(self):
        if self.locationid is not None:
            return self.locationid, self.flag
        if self.container is not None:
            return self.container.rootlocation()
        raise RuntimeError("No location and no container in %s?" %
                           str(self))

    def samelocation(self, otheritem):
        if self.itemid != otheritem.itemid:
            return False
        if self.container == otheritem.container:
            return True
        if self.container is None or otheritem.container is None:
            return False
        if self.container.itemid == otheritem.container.itemid:
            return True
        return False

_typename = None
def typename(typeid):
    global _typename
    if _typename is None:
        c = conn.cursor()
        c.execute("SELECT typeid, typename FROM ccp.invtypes")
        _typename = dict(c.fetchall())
    return _typename.get(typeid, "<typeid %s>" % typeid)

_flagname = None
def flagname(flagid):
    global _flagname
    if _flagname is None:
        corp = api.corp()
        sheet = corp.CorporationSheet()
        division = dict(sheet.divisions._rows)
        c = conn.cursor()
        c.execute("SELECT flagid, flagname FROM ccp.invflags")
        _flagname = dict(c.fetchall())
        for flagid in _flagname:
            if _flagname[flagid] == 'CorpMarket':
                _flagname[flagid] = 'DELIVERIES'
            if _flagname[flagid].startswith("CorpSAG"):
                _flagname[flagid] = division[int(_flagname[flagid][-1]) + 999]
            if _flagname[flagid] == 'Hangar':
                _flagname[flagid] = division[1000]
    return _flagname.get(flagid, "<flagid %s>" % flagid)

_locations = None
def locationname(locationid):
    global _locations
    if _locations is None:
        c = conn.cursor()
        _locations = {}
        c.execute("SELECT stationid, stationname FROM ccp.stastations")
        for staid, name in c.fetchall():
            _locations[staid] = name
            _locations[staid + 6000001] = name
        c.execute("SELECT solarsystemid, solarsystemname "
                  "FROM ccp.mapsolarsystems")
        _locations.update(dict(c.fetchall()))
    return _locations.get(locationid, "<locationid %s>" % locationid)

if __name__ == '__main__':
    main()
