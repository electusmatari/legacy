#!/usr/bin/env python

import optparse

import evelib.newdb as db

REGIONS = {'republic': ['Heimatar', 'Metropolis', 'Molden Heath']}

# DIVISIONS = {'kill': ['Command', 'Intelligence', 'Internal Security',
#                       'Security', 'Surveillance', 'Legal'],
#              'killmix': ['Command', 'Intelligence', 'Internal Security',
#                          'Security', 'Surveillance', 'Legal',
#                          'Administration'],
#              'courier': ['Accounting', 'Administration', 'Advisory',
#                          'Archives', 'Astrosurveying', 'Distribution',
#                          'Financial', 'Manufacturing', 'Marketing',
#                          'Mining', 'Personnel', 'Production',
#                          'Public Relations', 'Storage'],
#              'r&d': ['R&D']
#              }

CORPTYPES = {
    'military': ['Brutor Tribe', 'Republic Fleet',
                 'Republic Justice Department', 'Republic Military School',
                 'Republic Security Services'],
    'trade': ['Freedom Extension', 'Krusual Tribe', 'Pator Tech School',
              'Republic Parliament', 'The Leisure Group', 'Urban Management',
              'Vherokior Tribe'],
    'industry': ['Boundless Creation', 'Core Complexion Inc.',
                 'Eifyr and Co.', 'Minmatar Mining Corporation',
                 'Native Freshfood', 'Republic University',
                 'Sebiestor Tribe', 'Six Kin Development']
    }

def main():
    parser = optparse.OptionParser()
    parser.add_option("--level", dest="levels", action="append",
                      help="Limit to agents of this LEVEL", metavar="LEVEL",
                      default=[])
    parser.add_option("--division", dest="divisions", action="append",
                      help="Division of the agent",
                      default=[])
    parser.add_option("--corp", dest="corps", action="append",
                      help="Corporation, or military, trade or industry",
                      default=[])
    parser.add_option("--corpfaction", dest="corpfactions", action="append",
                      help="Faction of the corporation",
                      default=[])
    parser.add_option("--system", dest="systems", action="append",
                      help="System of the agent",
                      default=[])
    parser.add_option("--security", dest="security",
                      help="Minimum security (or max if starts with <)",
                      default="0.45")
    parser.add_option("--regionname", dest="regions", action="append",
                      help="Region name, or 'republic'",
                      default=[])
    parser.add_option("--regionfaction", dest="regionfactions",
                      action="append",
                      help="Faction of the region",
                      default=[])
    parser.add_option("--locator", dest="locator", action="store_true",
                      help="Only show locator agents",
                      default=False)
    parser.add_option("--type", dest="types", action="append",
                      help="Limit to agents of type TYPE", metavar="TYPE",
                      default=[])
    options, args = parser.parse_args()
    if len(options.types) == 0:
        options.type = ['BasicAgent']
    if len(options.divisions) == 0:
        options.divisions = ['Security']
    if len(options.corpfactions) == 0:
        options.corpfactions = ['Minmatar Republic']
    if len(options.regions) == 0:
        options.regions = [] # ['republic']
    if len(options.levels) == 0:
        options.levels = ['4']

    conn = db.connect()
    c = conn.cursor()

    (sql, args) = build_argument(options)
    c.execute(ALL_AGENTS_SQL % sql, args)

    print "| Corporation | Division | Region | System |"
    print "|-"
    for row in c.fetchall():
        print "| %s | %s | %s | %s |" % (row.corporation,
                                         row.division,
                                         row.region,
                                         row.system)

def build_argument(options):
    sql = ["cf.factionname NOT IN (%s, %s)"]
    args = ['Jove Empire', 'CONCORD Assembly']
    if options.locator:
        sql.append("a.islocator = 1")
    if options.security.startswith("<"):
        sql.append("s.security < %s")
        args.append(options.security[1:])
    else:
        sql.append("s.security >= %s")
        args.append(options.security)

    regions = []
    for reg in options.regions:
        if reg in REGIONS:
            regions.extend(REGIONS[reg])
        else:
            regions.append(reg)
    options.regions = regions

    divisions = []
    for div in options.divisions:
        divisions.append(div)
    options.divisions = divisions

    corps = []
    for corp in options.corps:
        if corp in CORPTYPES:
            corps.extend(CORPTYPES[corp])
        else:
            corps.append(corp)
    options.corps = corps

    for col, val in [('a.level', options.levels),
                     ('d.divisionname', options.divisions),
                     ('cn.itemname', options.corps),
                     ('cf.factionname', options.corpfactions),
                     ('s.solarsystemname', options.systems),
                     ('r.regionname', options.regions),
                     ('rf.factionname', options.regionfactions),
                     ('at.agenttype', options.types)
                     ]:
        if len(val) > 0:
            newsql, newargs = make_incheck(col, val)
            sql.append(newsql)
            args.extend(newargs)
    return " AND ".join(sql), args

def make_incheck(column, values):
    sql = "%s IN (%s)" % (column, ", ".join(["%s"] * len(values)))
    args = values
    return sql, args

ALL_AGENTS_SQL = """
SELECT a.level, d.divisionname AS division,
       cn.itemname AS corporation, cf.factionname AS corp_faction,
       s.solarsystemname AS system, s.security, r.regionname AS region,
       rf.factionname AS region_faction,
       (CASE WHEN a.islocator = 1
             THEN 't'::boolean
             ELSE 'f'::boolean
        END) AS is_locator,
       (-1 * s.security) AS payment
FROM ccp.agtagents a
     INNER JOIN ccp.invnames an
       ON a.agentid = an.itemid
     INNER JOIN ccp.agtagenttypes at
       ON a.agenttypeid = at.agenttypeid
     INNER JOIN ccp.crpnpcdivisions d
       ON a.divisionid = d.divisionid

     INNER JOIN ccp.crpnpccorporations c
       ON a.corporationid = c.corporationid
     INNER JOIN ccp.invnames cn
       ON c.corporationid = cn.itemid
     INNER JOIN ccp.chrfactions cf
       ON c.factionid = cf.factionid

     INNER JOIN ccp.stastations st
       ON a.locationid = st.stationid
     INNER JOIN ccp.mapsolarsystems s
       ON st.solarsystemid = s.solarsystemid
     INNER JOIN ccp.mapregions r
       ON s.regionid = r.regionid
     INNER JOIN ccp.chrfactions rf
       ON r.factionid = rf.factionid
WHERE %s
ORDER BY payment DESC, s.solarsystemname ASC, d.divisionname ASC
"""

main()
