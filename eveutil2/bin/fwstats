#!/usr/bin/env python

import evelib.api as apilib
import evelib.newdb as db

conn = None

def main():
    global conn
    conn = db.connect()
    api = apilib.api()
    fwts = api.eve.FacWarTopStats()
    data = {}
    for groupname, nameattr, idattr, cls in [('factions',
                                              'factionName',
                                              'factionID',
                                              Faction),
                                             ('corporations',
                                              'corporationName',
                                              'corporationID',
                                              Corporation),
                                             ('characters',
                                              'characterName',
                                              'characterID',
                                              Pilot)]:
        data[groupname] = {}
        for (pointtype, valueattr) in [('Kills', 'kills'),
                                       ('VictoryPoints', 'victoryPoints')]:
            for range in ['Yesterday', 'LastWeek', 'Total']:
                addgroup(fwts, groupname, pointtype, range, nameattr, idattr,
                         valueattr, data[groupname], cls)
    print "<html><head>"
    print """
<script type="text/javascript" src="js/jquery.js"></script>
<script type="text/javascript" src="js/jquery.tablesorter.js"></script>
<script type="text/javascript">
$(function() {
    $('table.factions').tablesorter({
        headers: {0: { sorter: 'digit', },
                  1: { sorter: 'digit', },
                  2: { sorter: 'digit', },
                  3: { sorter: 'digit', },
                  4: { sorter: 'digit', },
                  5: { sorter: 'digit', },
                 }
    });
    $('table.corporations').tablesorter({
        headers: {0: { sorter: 'digit', },
                  1: { sorter: 'digit', },
                  2: { sorter: 'digit', },
                  3: { sorter: 'digit', },
                  4: { sorter: 'digit', },
                  5: { sorter: 'digit', },
                  6: { sorter: 'digit', },
                  7: { sorter: 'digit', },
                  8: { sorter: 'digit', },
                  9: { sorter: 'digit', },
                  10: { sorter: 'digit', },
                  11: { sorter: 'digit', },
                 }
    });
    $('table.pilots').tablesorter({
        headers: {0: { sorter: 'digit', },
                  1: { sorter: 'digit', },
                  2: { sorter: 'digit', },
                  3: { sorter: 'digit', },
                  4: { sorter: 'digit', },
                  5: { sorter: 'digit', },
                  6: { sorter: 'digit', },
                  7: { sorter: 'digit', },
                  8: { sorter: 'digit', },
                  9: { sorter: 'digit', },
                  10: { sorter: 'digit', },
                  11: { sorter: 'digit', },
                 }
    });
});
</script>
<style type="text/css">
html {
    font-family: sans-serif;
}

table {
    border: 1px solid black;
    border-collapse: collapse;
    border: 1px solid #888;
}

td, th {
    padding: 0.2em;
    white-space: nowrap;
}

td {
    border: 1px solid #AFAFAF;
}

.numeric {
    text-align: right;
}

.minmatarrepublic {
    background: #FFCFCF;
}

.gallentefederation {
    background: #CFFFCF;
}

.amarrempire {
    background: #FFFFCF;
}

.caldaristate {
    background: #CFCFFF;
}

</style>
"""
    for corp in data["corporations"].values():
        corp.factions = data["factions"]
    for pilot in data["characters"].values():
        pilot.factions = data["factions"]
        pilot.corps = data["corporations"]
    print "</head><body>"
    print "<h1>Factional Warfare Statistics</h1>"
    print "<h2>Factions</h2>"
    print table('factions', data["factions"].values())
    print "<h2>Corporations</h2>"
    print table('corporations', data["corporations"].values())
    print "<h2>Pilots</h2>"
    print table('pilots', data["characters"].values())
    print "</body></html>"


def addgroup(fwts, groupname, pointtype, range, nameattr, idattr,
             valueattr, dest, cls):
    group = getattr(fwts, groupname)
    attr = pointtype + range
    for row in getattr(group, attr):
        name = getattr(row, nameattr)
        if name not in dest:
            itemid = getattr(row, idattr)
            o = cls(name, itemid)
            dest[name] = o
        else:
            o = dest[name]
        setattr(o, attr, getattr(row, valueattr))

def table(cls, rows):
    rows.sort(lambda a, b: cmp(a.VictoryPointsLastWeek,
                               b.VictoryPointsLastWeek),
              reverse=True)
    s = '<table class="%s"><thead>' % cls
    s += rows[0].header()
    s += '</thead><tbody>'
    for row in rows:
        s += row.row()
    s += '</tbody></table>'
    return s

def pilotinfo(pilotname):
    c = conn.cursor()
    c.execute("SELECT c.name, COALESCE(cf.name, pf.name) "
              "FROM ki_pilot p "
              "     INNER JOIN ki_corp c ON p.corp_id = c.id "
              "     LEFT JOIN ki_faction pf ON p.faction_id = pf.id "
              "     LEFT JOIN ki_faction cf ON c.faction_id = cf.id "
              "WHERE p.name = %s",
              (str(pilotname),))
    if c.rowcount == 0:
        return ("Unknown", "Unknown")
    else:
        (corp, faction) = c.fetchone()
        if faction is None:
            faction = "None"
        return (corp, faction)

def corpinfo(corpname):
    c = conn.cursor()
    c.execute("SELECT f.name FROM ki_corp c INNER JOIN ki_faction f "
              "ON c.faction_id = f.id WHERE c.name = %s",
              (corpname,))
    if c.rowcount == 0:
        return "Unknown"
    else:
        return c.fetchone()[0]

class Statistics(object):
    def __init__(self, name, externalid):
        self.name = name
        self.externalid = externalid
        self.corps = None
        self.factions = None
        self.VictoryPointsYesterday = None
        self.KillsYesterday = None
        self.VictoryPointsLastWeek = None
        self.KillsLastWeek = None
        self.VictoryPointsTotal = None
        self.KillsTotal = None

    def getvaluepercentage(self, attr, group):
        val = getattr(self, attr)
        if val is None:
            val = "?"
            perc = "?"
        elif group is None:
            perc = "?"
        else:
            groupval = getattr(group, attr)
            if groupval is None or groupval == 0:
                perc = "?"
            else:
                perc = int(round((val / float(groupval)) * 100))
        return val, perc

class Faction(Statistics):
    def header(self):
        return (# '<tr>'
                # '<th colspan="2">Yesterday</th>'
                # '<th colspan="2">Last Week</th>'
                # '<th colspan="2">Total</th>'
                # '<th></th>'
                # '</tr>'
                '<tr>'
                '<th>VP</th><th>Kills</th>'
                '<th>VP</th><th>Kills</th>'
                '<th>VP</th><th>Kills</th>'
                '<th>Faction</th></tr>')

    def row(self):
        cssclass = self.name.lower().replace(" ", "")
        return ('<tr class="%s">'
                '<td class="numeric">%s</td><td class="numeric">%s</td>'
                '<td class="numeric">%s</td><td class="numeric">%s</td>'
                '<td class="numeric">%s</td><td class="numeric">%s</td>'
                '<td>%s</td></tr>' %
                (cssclass,
                 self.VictoryPointsYesterday,
                 self.KillsYesterday,
                 self.VictoryPointsLastWeek,
                 self.KillsLastWeek,
                 self.VictoryPointsTotal,
                 self.KillsTotal,
                 self.name))

class Corporation(Statistics):
    def __init__(self, *args, **kwargs):
        super(Corporation, self).__init__(*args, **kwargs)
        self.faction = corpinfo(self.name)

    def header(self):
        return (# '<tr>'
                # '<th colspan="4">Yesterday</th>'
                # '<th colspan="4">Last Week</th>'
                # '<th colspan="4">Total</th>'
                # '<th colspan="2"></th>'
                # '</tr>'
                '<tr>'
                '<th>VP</th><th>VP%</th><th>Kills</th><th>Kill%</th>'
                '<th>VP</th><th>VP%</th><th>Kills</th><th>Kill%</th>'
                '<th>VP</th><th>VP%</th><th>Kills</th><th>Kill%</th>'
                '<th>Name</th><th>Faction</th></tr>')

    def row(self):
        cssclass = self.faction.lower().replace(" ", "")
        if self.faction in self.factions:
            f = self.factions[self.faction]
        else:
            f = None
        return ('<tr class="%s">'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td>%s</td>'
                '<td>%s</td></tr>' %
                ((cssclass,) +
                 self.getvaluepercentage('VictoryPointsYesterday', f) +
                 self.getvaluepercentage('KillsYesterday', f) +
                 self.getvaluepercentage('VictoryPointsLastWeek', f) +
                 self.getvaluepercentage('KillsLastWeek', f) +
                 self.getvaluepercentage('VictoryPointsTotal', f) +
                 self.getvaluepercentage('KillsTotal', f) +
                (self.name,
                 self.faction)))

class Pilot(Statistics):
    def __init__(self, *args, **kwargs):
        super(Pilot, self).__init__(*args, **kwargs)
        (self.corp, self.faction) = pilotinfo(self.name)

    def header(self):
        return (# '<tr>'
                # '<th colspan="4">Yesterday</th>'
                # '<th colspan="4">Last Week</th>'
                # '<th colspan="4">Total</th>'
                # '<th colspan="3"></th>'
                # '</tr>'
                '<tr>'
                '<th>VP</th><th>VP%</th><th>Kills</th><th>Kill%</th>'
                '<th>VP</th><th>VP%</th><th>Kills</th><th>Kill%</th>'
                '<th>VP</th><th>VP%</th><th>Kills</th><th>Kill%</th>'
                '<th>Name</th><th>Corp</th><th>Faction</th></tr>')

    def row(self):
        cssclass = self.faction.lower().replace(" ", "")
        if self.corp in self.corps:
            c = self.corps[self.corp]
        else:
            c = None
        return ('<tr class="%s">'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td class="numeric">%s</td>'
                '<td>%s</td>'
                '<td>%s</td>'
                '<td>%s</td></tr>' %
                ((cssclass,) +
                 self.getvaluepercentage('VictoryPointsYesterday', c) +
                 self.getvaluepercentage('KillsYesterday', c) +
                 self.getvaluepercentage('VictoryPointsLastWeek', c) +
                 self.getvaluepercentage('KillsLastWeek', c) +
                 self.getvaluepercentage('VictoryPointsTotal', c) +
                 self.getvaluepercentage('KillsTotal', c) +
                (self.name,
                 self.corp,
                 self.faction)))


if __name__ == '__main__':
    main()
