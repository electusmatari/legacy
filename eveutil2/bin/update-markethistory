#!/usr/bin/env python

# CREATE TABLE market_history (
#     id SERIAL NOT NULL,
#     day DATE NOT NULL,
#     regionid BIGINT NOT NULL,
#     typeid BIGINT NOT NULL,
#     orders BIGINT NOT NULL,
#     movement BIGINT NOT NULL,
#     max DOUBLE PRECISION NOT NULL,
#     avg DOUBLE PRECISION NOT NULL,
#     min DOUBLE PRECISION NOT NULL,
#     UNIQUE (day, regionid, typeid)
# );

import evelib.newdb as evedb
import emcom.gmi
import datetime
import urllib
import bz2
import StringIO
import csv
import sdb

REGIONS = ['Heimatar', 'Metropolis', 'Molden Heath', 'The Forge']
HISTORIC_URL = "http://export.eve-metrics.com/historic/%s.csv.bz2"

def main():
    conn = evedb.connect()
    c = conn.cursor()
    c.execute("SELECT regionname, regionid FROM ccp.mapregions")
    regionids = dict(c.fetchall())
    start = datetime.datetime.utcnow() - datetime.timedelta(days=367)
    for region in REGIONS:
        regionid = regionids[region]
        c.execute("SELECT day, typeid FROM market_history "
                  "WHERE regionid = %s "
                  "  AND day > %s",
                  (regionid, start))
        known_days = {}
        for day, typeid in c.fetchall():
            known_days.setdefault(typeid, set())
            known_days[typeid].add(long(day.strftime("%Y%m%d")))
        url = urllib.urlopen(HISTORIC_URL % (regionid,))
        rows = csv.reader(StringIO.StringIO(bz2.decompress(url.read())))
        for row in rows:
            if row[0] == 'type_id':
                continue
            if len(row) != 7:
                print "Bad row: %r" % (row,)
                raise RuntimeError()
            (type_id, orders, movement, max, avg, min, date) = row
            type_id = int(type_id)
            orders = long(orders)
            movement = long(movement)
            max = float(max)
            avg = float(avg)
            min = float(min)
            date = datetime.datetime.strptime(date, "%Y-%m-%d")
            if date < start:
                continue
            datenum = long(date.strftime("%Y%m%d"))
            if datenum not in known_days.get(type_id, []):
                try:
                    c.execute("INSERT INTO market_history (day, regionid, "
                              "    typeid, orders, movement, "
                              "    max, avg, min) "
                              "VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
                              (date, regionid, type_id, orders, movement,
                               max, avg, min))
                    conn.commit()
                except sdb.IntegrityError:
                    conn.rollback()
    # for typerow in emcom.gmi.TYPE_DATA:
    #     if typerow[1] is not None:
    #         continue
    #     for historyrow in evemetrics.history([typerow[0]], regions=REGIONS):
    #         insert(c, historyrow)
    conn.commit()

def isknown(c, day, regionid, typeid):
    c.execute("SELECT EXISTS (SELECT * FROM market_history "
              "WHERE day = %s "
              "  AND regionid = %s "
              "  AND typeid = %s)",
              (day, regionid, typeid))
    return c.fetchone()[0]

import bz2
class BZReader(object):
    def __init__(self, bzstream, bufsize=1024*1024):
        self.bzstream = bzstream
        self.bufsize = bufsize
    def __iter__(self):
        buf = ""
        decompress = bz2.BZ2Decompressor()
        while True:
            bzdata = self.bzstream.read(self.bufsize)
            if bzdata == '':
                if buf != '':
                    yield buf + "\n"
                return
            buf += decompress.decompress(bzdata)
            while "\n" in buf:
                i = buf.index("\n")
                line = buf[:i+1]
                buf = buf[i+1:]
                yield line

if __name__ == '__main__':
    main()
