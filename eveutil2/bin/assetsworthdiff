#!/usr/bin/env python

import datetime
import gzip
import optparse

import emcom.grd as grd

import evelib.newdb as db
import evelib.eveapi as eveapi
import evelib.api as api
from evelib.util import humane

conn = db.connect()

def main():
    parser = optparse.OptionParser()
    (options, args) = parser.parse_args()
    old, oldtime = parse(gzip.GzipFile(args[0]))
    new, newtime = parse(gzip.GzipFile(args[1]))
    new -= old
    printbag(new)

def printbag(bag):
    prices = grd.prices()
    items = [(tn, prices.get(typename(tn), 0.0), qty)
             for tn, qty in bag.items()
             if qty != 0]
    items.sort(lambda a, b: cmp((a[1] * a[2], a[0]),
                                (b[1] * b[2], b[0])),
               reverse=True)
    total = 0
    for (typeid, price, qty) in items:
        total += price * qty
        print "%18s %s (%s%s)" % (
            humane(price * qty),
            typename(typeid),
            "+" if qty > 0 else "",
            humane(qty)
            )
    print "=" * 18
    print "%18s Total" % humane(total)

def parse(stream):
    data = eveapi._Parser().Parse(stream, True)
    timestamp = datetime.datetime.utcfromtimestamp(data.currentTime)
    return summarize(data.result.assets), timestamp

def summarize(rows):
    result = AssetsBag()
    for row in rows:
        result.setdefault(row.typeID, 0)
        result[row.typeID] += row.quantity
        if hasattr(row, 'contents'):
            result += summarize(row.contents)
    return result

class AssetsBag(dict):
    def __iadd__(self, otherdict):
        for key, value in otherdict.items():
            self.setdefault(key, 0)
            self[key] += value
        return self

    def __isub__(self, otherdict):
        for key, value in otherdict.items():
            self.setdefault(key, 0)
            self[key] -= value
        return self

_typename = None
def typename(typeid):
    global _typename
    if _typename is None:
        c = conn.cursor()
        c.execute("SELECT typeid, typename FROM ccp.invtypes")
        _typename = dict(c.fetchall())
    return _typename.get(typeid, "<typeid %s>" % typeid)

if __name__ == '__main__':
    main()
