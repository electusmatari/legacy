#!/usr/bin/env python

import evelib.newdb as db
import emcom.gmi as gmi
from emcom import humane

conn = None

def main():
    global conn
    conn = db.connect()
    c = conn.cursor()
    schematics = get_schematics(c)
    index = gmi.current()
    profits = []
    for schematic in schematics:
        profit = schematic.profit(index)
        if profit is None:
            continue
        profits.append((profit * 24 * 7, schematic))
    profits.sort(reverse=True)
    for profit, schematic in profits:
        print "%15s %s (%s, %s m3)" % (humane(profit),
                                       schematic.name,
                                       schematic.level(),
                                       humane(max(schematic.invol,
                                                  schematic.outvol)
                                              * 24 * 7))

def get_schematics(c):
    c.execute("SELECT schematicid, schematicname, cycletime "
              "FROM ccp.planetschematics")
    schematics = dict((sid, Schematic(sid, name, cycletime))
                      for (sid, name, cycletime) in c.fetchall())
    c.execute("SELECT p.schematicid, t.typename, p.quantity, p.isinput, "
              "       t.volume, g.groupname "
              "FROM ccp.planetschematicstypemap p "
              "     INNER JOIN ccp.invtypes t ON p.typeid = t.typeid "
              "     INNER JOIN ccp.invgroups g ON t.groupid = g.groupid")
    for (sid, typename, qty, isinput, volume, group) in c.fetchall():
        if isinput:
            schematics[sid].addinput(typename, qty, volume)
        else:
            schematics[sid].setgroup(group)
            schematics[sid].setoutput(typename, qty, volume)
    return schematics.values()

class Schematic(object):
    def __init__(self, sid, name, cycletime):
        self.id = sid
        self.name = name
        self.cycletime = cycletime
        self.inputs = []
        self.output = None
        self.invol = 0
        self.outvol = 0

    def addinput(self, typename, qty, volume):
        self.invol += qty * volume
        self.inputs.append((typename, qty))

    def setoutput(self, typename, qty, volume):
        if self.output is not None:
            raise RuntimeError("More than one output for %s!" % self.name)
        self.outvol += qty * volume
        self.output = (typename, qty)

    def setgroup(self, groupname):
        self.groupname = groupname

    def level(self):
        level = PITYPEMAP.get(self.name, None)
        if level is None:
            print "!!! %s" % self.name
        if level == 'P3':
            level = "%s/%s" % (level, len(self.inputs))
        return level

    def profit(self, index):
        (name, qty) = self.output
        (importtax, exporttax) = taxrates(name)
        isk = (index[name].jita - importtax) * qty
        for name, qty in self.inputs:
            if index[name].jita == 0:
                return None
            (importtax, exporttax) = taxrates(name)
            isk -= (index[name].jita + exporttax) * qty
        # Profit per hour
        return (isk*60*60) / float(self.cycletime)

taxes = None
volumes = None
def taxrates(name):
    global taxes
    global volumes
    if taxes is None:
        c = conn.cursor()
        c.execute("SELECT typename, volume FROM ccp.invtypes")
        volumes = dict(c.fetchall())
        c.execute("SELECT t.typename AS typename, "
                  "       COALESCE(i.valuefloat, i.valueint, 1) AS importtax, "
                  "       COALESCE(e.valuefloat, e.valueint, 1) AS exporttax "
                  "FROM ccp.invtypes t "
                  "     LEFT JOIN ccp.dgmtypeattributes i "
                  "       ON t.typeid = i.typeid "
                  "     LEFT JOIN ccp.dgmattributetypes ia "
                  "       ON i.attributeid = ia.attributeid "
                  "     LEFT JOIN ccp.dgmtypeattributes e "
                  "       ON t.typeid = e.typeid "
                  "     LEFT JOIN ccp.dgmattributetypes ea "
                  "       ON e.attributeid = ea.attributeid "
                  "WHERE ia.attributename = 'importTaxMultiplier' "
                  "  AND ea.attributename = 'exportTaxMultiplier'")
        taxes = dict((x.typename, (x.importtax, x.exporttax))
                     for x in c.fetchall())
    if name in taxes:
        (importtax, exporttax) = taxes[name]
    else:
        (importtax, exporttax) = (1.0, 1.0)
    return (importtax * volumes[name],
            exporttax * volumes[name] * 2)

PITYPEMAP = {
    'Aqueous Liquids': 'R0',
    'Autotrophs': 'R0',
    'Base Metals': 'R0',
    'Carbon Compounds': 'R0',
    'Complex Organisms': 'R0',
    'Felsic Magma': 'R0',
    'Heavy Metals': 'R0',
    'Ionic Solutions': 'R0',
    'Micro Organisms': 'R0',
    'Noble Gas': 'R0',
    'Noble Metals': 'R0',
    'Non-CS Crystals': 'R0',
    'Planktic Colonies': 'R0',
    'Reactive Gas': 'R0',
    'Suspended Plasma': 'R0',

    'Bacteria': 'P1',
    'Biofuels': 'P1',
    'Biomass': 'P1',
    'Chiral Structures': 'P1',
    'Electrolytes': 'P1',
    'Industrial Fibers': 'P1',
    'Oxidizing Compound': 'P1',
    'Oxygen': 'P1',
    'Plasmoids': 'P1',
    'Precious Metals': 'P1',
    'Proteins': 'P1',
    'Reactive Metals': 'P1',
    'Silicon': 'P1',
    'Toxic Metals': 'P1',
    'Water': 'P1',

    'Biocells': 'P2',
    'Construction Blocks': 'P2',
    'Consumer Electronics': 'P2',
    'Coolant': 'P2',
    'Enriched Uranium': 'P2',
    'Fertilizer': 'P2',
    'Genetically Enhanced Livestock': 'P2',
    'Livestock': 'P2',
    'Mechanical Parts': 'P2',
    'Microfiber Shielding': 'P2',
    'Miniature Electronics': 'P2',
    'Nanites': 'P2',
    'Oxides': 'P2',
    'Polyaramids': 'P2',
    'Polytextiles': 'P2',
    'Rocket Fuel': 'P2',
    'Silicate Glass': 'P2',
    'Super Conductors': 'P2',
    'Supertensile Plastics': 'P2',
    'Synthetic Oil': 'P2',
    'Test Cultures': 'P2',
    'Transmitter': 'P2',
    'Viral Agent': 'P2',
    'Water-Cooled CPU': 'P2',

    'Biotech Research Reports': 'P3',
    'Camera Drones': 'P3',
    'Condensates': 'P3',
    'Cryoprotectant Solution': 'P3',
    'Data Chips': 'P3',
    'Gel-Matrix Biopaste': 'P3',
    'Guidance Systems': 'P3',
    'Hazmat Detection Systems': 'P3',
    'Hermetic Membranes': 'P3',
    'High-Tech Transmitter': 'P3',
    'Industrial Explosives': 'P3',
    'Neocoms': 'P3',
    'Nuclear Reactors': 'P3',
    'Planetary Vehicles': 'P3',
    'Robotics': 'P3',
    'Smartfab Units': 'P3',
    'Supercomputers': 'P3',
    'Synthetic Synapses': 'P3',
    'Transcranial Microcontroller': 'P3',
    'Ukomi Super Conductor': 'P3',
    'Vaccines': 'P3',

    'Broadcast Node': 'P4',
    'Integrity Response Drones': 'P4',
    'Nano-Factory': 'P4',
    'Organic Mortar Applicators': 'P4',
    'Recursive Computing Module': 'P4',
    'Self-Harmonizing Power Core': 'P4',
    'Sterile Conduits': 'P4',
    'Wetware Mainframe': 'P4',
    }


if __name__ == '__main__':
    main()
