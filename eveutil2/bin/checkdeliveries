#!/usr/bin/env python

import datetime
import evelib.api as api
import evelib.newdb as db

conn = db.connect()

def main():
    coverage = get_buyorder_coverage()
    deliveries, ts = get_deliveries()
    result = {}
    sizes = {}
    regionsizes = {}
    for system in deliveries:
        for typename, qty in deliveries[system].items():
            if system not in coverage or typename not in coverage[system]:
                result.setdefault(system, [])
                result[system].append((typename, qty))
                sizes.setdefault(system, 0)
                sizes[system] += volume(typename) * qty
                region = _regions[system]
                regionsizes.setdefault(region, 0)
                regionsizes[region] += volume(typename) * qty

    print "Data from: %s" % ts.strftime("%Y-%m-%d %H:%M")
    print
    for region in sorted(regionsizes):
        print "%11.2fk m3 %s"  % (regionsizes[region], region)
    print
    result = sorted(result.items(), key=lambda entry: sizes[entry[0]],
                    reverse=True)
    last = None
    for system, contents in result:
        if system in coverage:
            names = set()
            for newnames in coverage[system].values():
                names.update(newnames)
            names = sorted(names)
            notes = ", covered (%s)" % ", ".join(names)
        else:
            notes = ""
        print "** %s, %s (%.2fk m3%s)" % (system, _regions[system], sizes[system] / 1000.0, notes)
        for typename, qty in contents:
            print "%10sx %s" % (qty, typename)

##################################################################
# Deliveries

def get_deliveries():
    corp = api.corp()
    assets = corp.AssetList()
    result = {}
    for item in assets.assets:
        if flagid2name(item.flag) != 'DELIVERIES':
            continue
        system = stationid2system(item.locationID)
        qty = item.quantity
        typename = typeid2name(item.typeID)
        result.setdefault(system, {})
        result[system].setdefault(typename, 0)
        result[system][typename] += qty
    return result, datetime.datetime.utcfromtimestamp(assets._meta.currentTime)

##################################################################
# Buy orders

def get_buyorder_coverage():
    corp = api.corp()
    mo = corp.MarketOrders()
    result = {}
    for order in mo.orders:
        if order.bid == 0 or order.orderState != 0 or order.volRemaining <= 0:
            continue
        for system in systems_in_range(order.stationID, order.range):
            typename = typeid2name(order.typeID)
            charname = charid2name(order.charID)
            result.setdefault(system, {})
            result[system].setdefault(typename, set())
            result[system][typename].add(charname)
    return result

_systems = None
_regions = None
def systems_in_range(stationid, range):
    global _systems
    if _systems is None:
        init_systems()
    startsystem = stationid2system(stationid)
    agenda = [(0, startsystem)]
    result = set()
    while len(agenda) > 0:
        ((distance, system), agenda) = (agenda[0], agenda[1:])
        if distance > range:
            continue
        if system in result:
            continue
        result.add(system)
        agenda.extend([(distance + 1, neighbor)
                       for neighbor in _systems[system]])
    return set(system for system in result
               if _regions[system] == _regions[startsystem])

_stations = None
def stationid2system(stationid):
    global _stations
    if _stations is None:
        c = conn.cursor()
        c.execute("SELECT st.stationid, s.solarsystemname "
                  "FROM ccp.stastations st "
                  "     INNER JOIN ccp.mapsolarsystems s "
                  "       ON st.solarsystemid = s.solarsystemid")
        _stations = dict(c.fetchall())
    return _stations[stationid]

def init_systems():
    global _systems
    global _regions
    c = conn.cursor()
    _systems = {}
    c.execute("SELECT f.solarsystemname, t.solarsystemname "
              "FROM ccp.mapsolarsystemjumps j "
              "     INNER JOIN ccp.mapsolarsystems f "
              "       ON j.fromSolarSystemID = f.solarSystemID "
              "     INNER JOIN ccp.mapsolarsystems t "
              "       ON j.toSolarSystemID = t.solarSystemID")
    for fromsys, tosys in c.fetchall():
        _systems.setdefault(fromsys, set())
        _systems[fromsys].add(tosys)
    c.execute("SELECT s.solarsystemname, r.regionname "
              "FROM ccp.mapsolarsystems s "
              "     INNER JOIN ccp.mapregions r "
              "       ON s.regionid = r.regionid")
    _regions = dict(c.fetchall())
    
_types = None
def typeid2name(typeid):
    global _types
    if _types is None:
        c = conn.cursor()
        c.execute("SELECT typeid, typename FROM ccp.invtypes")
        _types = dict(c.fetchall())
    return _types[typeid]

_volumes = None
def volume(typename):
    global _volumes
    if _volumes is None:
        c = conn.cursor()
        c.execute("SELECT typename, volume FROM ccp.invtypes")
        _volumes = dict(c.fetchall())

    vol = _volumes[typename]
    if vol > 1000000:
        return 0
    else:
        return vol

_flagname = None
def flagid2name(flagid):
    global _flagname
    if _flagname is None:
        corp = api.corp()
        sheet = corp.CorporationSheet()
        division = dict(sheet.divisions._rows)
        c = conn.cursor()
        c.execute("SELECT flagid, flagname FROM ccp.invflags")
        _flagname = dict(c.fetchall())
        for flagid in _flagname:
            if _flagname[flagid] == 'CorpMarket':
                _flagname[flagid] = 'DELIVERIES'
            if _flagname[flagid].startswith("CorpSAG"):
                _flagname[flagid] = division[int(_flagname[flagid][-1]) + 999]
            if _flagname[flagid] == 'Hangar':
                _flagname[flagid] = division[1000]
    return _flagname.get(flagid, "<flagid %s>" % flagid)

_charid2name = {}
def charid2name(charid):
    if charid not in _charid2name:
        apiroot = api.api()
        _charid2name[charid] = apiroot.eve.CharacterName(ids=charid).characters[0].name
    return _charid2name[charid]

main()
