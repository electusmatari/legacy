#!/usr/bin/env python

import re
import sys
import urllib

def main():
    if len(sys.argv) == 3:
        (ignored, type, entityname) = sys.argv
        page = 0
    elif len(sys.argv) == 4:
        (ignored, type, entityname, page) = sys.argv
        page = int(page)
    else:
        sys.stderr.write("usage: bcnames <type> <name> [page]\n")
        sys.stderr.write("  type in 'alliance' or 'corp'\n")
        sys.exit(1)
    known = set()
    while True:
        sys.stderr.write("Page %i (%i names)\r" % 
                         (page, len(known)))
        names = bcnames(type, entityname, page)
        if len(names) == 0:
            break
        for name in names:
            if name not in known:
                sys.stdout.write("%s\n" % (name,))
                sys.stdout.flush()
                known.add(name)
        page += 1

LOSS_RE = re.compile(r'<div id="losses">((?:.|\n)*?)</table>')
# <td><a href="combat_record.php?type=player&name=Xiangh">Xiangh</a></td>
NAME_RE = re.compile(r'<td><a href="combat_record.php\?'
                     r'type=player&name=(?:.*?)">(.*?)</a></td>')

def bcnames(type, name, page=None):
    args = {'type': type,
            'name': name}
    if page is not None:
        args['page'] = page
    url = urllib.urlopen("http://eve.battleclinic.com"
                         "/killboard/combat_record.php?"
                         + urllib.urlencode(args))
    data = url.read()
    match = LOSS_RE.search(data)
    if match is None:
        return []
    losses = match.group(1)
    return NAME_RE.findall(losses)

try:
    main()
except:
    sys.stderr.write("\n")
    raise
