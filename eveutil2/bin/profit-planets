#!/usr/bin/env python

import evelib.newdb as db
import emcom.gmi as gmi
from emcom import humane

PLANET_MATERIALS = [
    "Aqueous Liquids",
    "Autotrophs",
    "Base Metals",
    "Carbon Compounds",
    "Complex Organisms",
    "Felsic Magma",
    "Heavy Metals",
    "Ionic Solutions",
    "Micro Organisms",
    "Noble Gas",
    "Noble Metals",
    "Non-CS Crystals",
    "Planktic Colonies",
    "Reactive Gas",
    "Suspended Plasma",
    ]

WEEKLY_EXTRACTION = 1000 * 60 * 60 * 24 * 7 / 300.0
# AlexH value: 15000 * 0.5 * 24 * 7

def main():
    index = gmi.current()
    profits = [(index[name].jita * WEEKLY_EXTRACTION, name)
               for name in PLANET_MATERIALS]
    profits.extend(products(index, PLANET_MATERIALS))
    profits.sort(reverse=True)
    for profit, name in profits:
        print "%15s %s" % (humane(profit), name)

def products(index, materials):
    conn = db.connect()
    c = conn.cursor()
    profits = []
    for material in materials:
        c.execute("SELECT input.typename, inputmap.quantity, "
                  "       output.typename, outputmap.quantity "
                  "FROM ccp.planetschematicstypemap inputmap, "
                  "     ccp.planetschematicstypemap outputmap, "
                  "     ccp.invtypes input, "
                  "     ccp.invtypes output "
                  "WHERE inputmap.schematicid = outputmap.schematicid "
                  "  AND inputmap.isinput = 1 "
                  "  AND outputmap.isinput = 0 "
                  "  AND inputmap.typeid = input.typeid "
                  "  AND outputmap.typeid = output.typeid "
                  "  AND input.typename = %s", (material,))
        if c.rowcount != 1:
            continue
        (inname, inqty, outname, outqty) = c.fetchone()
        qty = WEEKLY_EXTRACTION * float(outqty) / inqty
        profits.append((index[outname].jita * qty,
                        "%s -> %s" % (inname, outname)))
    return profits

if __name__ == '__main__':
    main()
