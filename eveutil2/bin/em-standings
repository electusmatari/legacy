#!/usr/bin/env python

import datetime
import urllib
import xml.etree.ElementTree as ET

import evelib.api as api
import evelib.eveapi as eveapi
from emcom import humane, eve_time, showinfo

def main():
    (standings, data_time, cached_until) = get_api_standings()
    standings = mangle(standings)
    (forumbugs, critical, neutrals, redundant, corpinalliance
     ) = verify_standings(standings)
    emit_html(forumbugs, critical, neutrals, redundant, corpinalliance,
              standings, data_time, cached_until)

def verify_standings(standings):
    critical = []
    neutrals = []
    redundant = []
    corpinalliance = []
    for standing in standings:
        if standing.size == 0:
            critical.append(Message(
                    standing.name,
                    "%s disbanded" % (standing.__html__(),)))
        if standing.standing == 0 and standing.incontacts:
            neutrals.append(Message(
                    standing.name,
                    "%s is neutral but in contacts" % (standing.__html__(),)))
        for corp in standing.corps:
            if corp.standing == 0 and corp.incontacts:
                neutrals.append(Message(
                        standing.name,
                        ("%s is neutral but in contacts" %
                         (standing.__html__(),))))
            if corp.size == 0:
                critical.append(Message(
                        corp.name.lower(),
                        "%s disbanded" % (corp.__html__(),)))
            if (standing.standing > 0 and corp.standing < 0 or
                standing.standing < 0 and corp.standing > 0):
                critical.append(Message(
                        corp.name.lower(),
                        "%s joined %s" % (corp.__html__(),
                                      standing.__html__())))
            if (standing.standing > 0 and corp.standing > 0 or
                standing.standing < 0 and corp.standing < 0):
                redundant.append(Message(
                        corp.name.lower(),
                        "%s joined %s" % (corp.__html__(),
                                          standing.__html__())))
            if standing.standing == 0 and corp.standing != 0:
                corpinalliance.append(Message(
                            corp.name.lower(),
                            "%s joined %s" % (corp.__html__(),
                                              standing.__html__())))
    forumbugs = get_forumbugs(standings)
    return forumbugs, critical, neutrals, redundant, corpinalliance

def mangle(standings):
    alliances = dict((standing.entityid, standing)
                     for standing in standings
                     if standing.entitytype == 'alliance')
    new = []
    for standing in standings:
        if standing.allianceid:
            if standing.allianceid not in alliances:
                ally = Standing(None, standing.allianceid, 0)
                alliances[ally.entityid] = ally
                new.append(ally)
            ally = alliances[standing.allianceid]
            ally.add_corp(standing)
        else:
            new.append(standing)
    for standing in new:
        standing.corps.sort(lambda a, b: cmp((a.size, b.name),
                                             (b.size, a.name)),
                            reverse=True)
    new.sort(lambda a, b: cmp((a.size, b.name),
                              (b.size, a.name)),
             reverse=True)
    return new

def emit_html(forumbugs, critical, neutrals, redundant, corpinalliance,
              standings, data_time, cached_until):
    print '<html>'
    print('<head><title>Electus Matari Standings</title>'
          '<style type="text/css">\n'
          'table {\n'
          '  border-collapse: collapse;\n'
          '}\n'
          'table tr {\n'
          '  border: 1px solid #CFAFCF;\n'
          '}\n'
          'table td {\n'
          '  padding: 0 0.2em;\n'
          '}\n'
          '.critical {\n'
          '  text-align: center;\n'
          '  background: #FF0000;\n'
          '}\n'
          '.redundant {\n'
          '  text-align: center;\n'
          '  background: #FFFF00;\n'
          '}\n'
          '.numeric {\n'
          '  text-align: right;\n'
          '}\n'
          '.self {\n'
          '  background: #7FFF7F;\n'
          '}\n'
          '.ally {\n'
          '  background: #7F7FFF;\n'
          '}\n'
          '.nap {\n'
          '  background: #AFAFFF;\n'
          '}\n'
          '.enemy {\n'
          '  background: #FF7F7F;\n'
          '}\n'
          '.hostile {\n'
          '  background: #FFAFAF;\n'
          '}\n'
          '.neutral {\n'
          '  background: #FFFFFF;\n'
          '}\n'
          '</style></head>')
    print '<body>'
    print ('<p>Last updated on %s, cached until %s.</p>' %
           (data_time.strftime("%Y-%m-%d %H:%M:%S"),
            cached_until.strftime("%Y-%m-%d %H:%M:%S")))
    printlist("Forum", forumbugs)
    printlist("Critical", critical)
    printlist("Neutral, but in the contact list", neutrals)
    # printlist("Redundant Standings", redundant)
    printlist("Standings with Corps in Alliances", corpinalliance)
    print '<h1>Standings List</h1>'
    stats = Statistics()
    print '<table>'
    for standing in standings:
        if standing.standing != 0:
            stats.add(standing, True)
        print '<tr>%s</tr>' % entity_row(standing)
        if len(standing.corps) > 0:
            for corp in standing.corps:
                print '<tr>%s</tr>' % entity_row(corp, True)
                if corp.standing != 0:
                    stats.add(corp, standing.standing == 0)
    print '</table>'
    print stats.__html__()

def entity_row(standing, do_indent=False):
    if do_indent:
        format = '<td></td><td class="numeric %s">%s</td><td class="%s"><span style="cursor: pointer" onClick="CCPEVE.showInfo(%s, %s)">%s %s</span></td><td class="numeric %s">%+2i</td>'
    else:
        format = '<td class="numeric %s">%s</td><td colspan="2" class="%s"><span style="cursor: pointer" onClick="CCPEVE.showInfo(%s, %s)">%s %s</span></td><td class="numeric %s">%+2i</td>'
    if standing.entitytype == 'alliance':
        typeid = "16159"
    else:
        typeid = "2"
    return format % (
        standing.standingclass, humane(standing.size), 
        standing.standingclass, typeid, standing.entityid,
        htmlquote(standing.name),
        htmlquote(standing.tickerstring),
        standing.standingclass, standing.standing)

def printlist(header, list):
    if len(list) < 1:
        return
    print '<h1>%s</h1>' % header
    print '<ul>'
    list.sort(lambda a, b: cmp(a.key, b.key))
    for line in list:
        print '<li>%s</li>' % line.text
    print '</ul>'

def get_api_standings():
    grd = api.corp()
    contactlist = grd.ContactList()
    result = []
    for contact in contactlist.allianceContactList:
        result.append(Standing(contact.contactName,
                               contact.contactID,
                               contact.standing,
                               incontacts=True))
    result.append(Standing("Electus Matari", 701459600, None))
    return (result,
            datetime.datetime.utcfromtimestamp(contactlist._meta.currentTime),
            datetime.datetime.utcfromtimestamp(contactlist._meta.cachedUntil))

class Message(object):
    def __init__(self, key, text):
        self.key = key
        self.text = text

class Statistics(object):
    def __init__(self):
        self.members = {}
        self.corps = {}
        self.alliances = {}

    def add(self, standing, add_members):
        if standing.entitytype == 'alliance':
            self.alliances.setdefault(standing.standing, 0)
            self.alliances[standing.standing] += 1
        else:
            self.corps.setdefault(standing.standing, 0)
            self.corps[standing.standing] += 1
        if add_members:
            self.members.setdefault(standing.standing, 0)
            self.members[standing.standing] += standing.size

    def __html__(self):
        return ('<p>%s standings</p>'
                '<table>'
                '<tr><td></td><th>+10</th><th>+5</th><th>-5</th><th>-10</th><th>All</th></tr>'
                '<tr><th>Alliances</th><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td></tr>'
                '<tr><th>Corporations</th><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td></tr>'
                '<tr><th>Total</th><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td></tr>'
                '<tr><th>Pilots</th><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td><td class="numeric">%s</td></tr>'
                '</table>' %
                (humane(sum(self.corps.values() + self.alliances.values())),
                 humane(self.alliances.get(10, 0)),
                 humane(self.alliances.get(5, 0)),
                 humane(self.alliances.get(-5, 0)),
                 humane(self.alliances.get(-10, 0)),
                 humane(sum(self.alliances.values())),
                 humane(self.corps.get(10, 0)),
                 humane(self.corps.get(5, 0)),
                 humane(self.corps.get(-5, 0)),
                 humane(self.corps.get(-10, 0)),
                 humane(sum(self.corps.values())),
                 humane(self.alliances.get(10, 0) + self.corps.get(10, 0)),
                 humane(self.alliances.get(5, 0) + self.corps.get(5, 0)),
                 humane(self.alliances.get(-5, 0) + self.corps.get(-5, 0)),
                 humane(self.alliances.get(-10, 0) + self.corps.get(-10, 0)),
                 humane(sum(self.alliances.values() + self.corps.values())),
                 humane(self.members.get(10, 0)),
                 humane(self.members.get(5, 0)),
                 humane(self.members.get(-5, 0)),
                 humane(self.members.get(-10, 0)),
                 humane(sum(self.members.values())),
                 ))
                        

class Standing(object):
    def __init__(self, name, entityid, standing, incontacts=False):
        #self.name = name
        self.entityid = entityid
        self.standing = standing
        (self.entitytype, self.name, self.ticker, self.size, self.allianceid
         ) = entity_info(entityid)
        if not hasattr(self.name, 'replace'):
            self.name = "<EntityID %s>" % self.entityid
        if self.entitytype == 'alliance':
            self.tickerstring = "<%s>" % self.ticker
        else:
            self.tickerstring = "[%s]" % self.ticker
        self.standingclass = get_standingclass(self.standing)
        if self.standing is None:
            self.standing = 0
        self.corps = []
        self.comment = ""
        self.incontacts = incontacts

    def typeid(self):
        if self.entitytype == 'alliance':
            return 16159
        else:
            return 2

    def __html__(self):
        return ('<span class="%s" style="cursor: pointer" onClick="CCPEVE.showInfo(%s, %s)">%s %s (%+i, %s members)</span>' %
                (self.standingclass,
                 self.typeid(), self.entityid,
                 htmlquote(self.name),
                 htmlquote(self.tickerstring),
                 self.standing,
                 humane(self.size)))

    def add_corp(self, standing):
        self.corps.append(standing)

def get_standingclass(standing):
    if standing is None:
        return "self"
    elif standing > 5:
        return "ally"
    elif standing > 0:
        return "nap"
    elif standing < -5:
        return "enemy"
    elif standing < 0:
        return "hostile"
    else:
        return "neutral"

class ForumStanding(object):
    def __init__(self, name, ticker, standing, comment):
        self.name = name
        self.ticker = eveapi._autocast('ticker', ticker[1:-1])
        self.tickerstring = ticker
        if ticker[0] == '[':
            self.entitytype = 'corp'
        else:
            self.entitytype = 'alliance'
        if standing == 'blue':
            self.standing = +5
        else:
            self.standing = int(standing)
        self.comment = comment

    def __html__(self):
        if self.standing > 0:
            return "%s %s (blue)" % (htmlquote(self.name),
                                     htmlquote(self.tickerstring))
        else:
            return "%s %s (%i)" % (htmlquote(self.name),
                                   htmlquote(self.tickerstring),
                                   self.standing)

_alliances = None
def entity_info(charid):
    global _alliances
    if _alliances is None:
        _alliances = api.api().eve.AllianceList().alliances
    for ally in _alliances:
        if ally.allianceID == charid:
            return ("alliance", ally.name, ally.shortName, ally.memberCount,
                    None)
    try:
        corp = api.api().corp.CorporationSheet(corporationID=charid)
    except:
        return ("alliance", "<EntityID %s>" % charid, "", 0, 0)
    allianceid = None
    if corp.allianceID > 0:
        allianceid = corp.allianceID
    return ("corp", corp.corporationName, corp.ticker, corp.memberCount,
            allianceid)

def htmlquote(s):
    return s.replace("&", "&amp;").replace("<", "&lt;")

def get_forumbugs(standings):
    result = []

    api_name2standing = {}
    for standing in standings:
        if standing.name == 'Electus Matari':
            continue
        if standing.standing != 0:
            api_name2standing[standing.name] = standing
        for corp in standing.corps:
            if corp.standing != 0:
                api_name2standing[corp.name] = corp
    api_names = set(api_name2standing.keys())

    forum_name2standing = dict((elt.name, elt)
                               for elt in get_forum_standings())
    forum_names = set(forum_name2standing.keys())

    for name in forum_names - api_names:
        standing = forum_name2standing[name]
        result.append(Message(standing.name,
                              "%s is set on the forums, but not in the neocom." %
                              (standing.__html__(),)))
    for name in api_names - forum_names:
        standing = api_name2standing[name]
        result.append(Message(standing.name,
                              "%s is set in the neocom, but not on the forums." %
                              (standing.__html__(),)))
    for name in api_names & forum_names:
        api_standing = api_name2standing[name]
        forum_standing = forum_name2standing[name]
        if api_standing.standing != forum_standing.standing:
            if forum_standing.standing > 0 and api_standing.standing > 0:
                continue
            if forum_standing.standing < 0 and api_standing.standing < 0:
                continue
            if forum_standing.standing > 0:
                standing = "blue"
            else:
                standing = "%+i" % forum_standing.standing
            result.append(Message(api_standing.name,
                                  "%s is set %+i on the forums." %
                                  (api_standing.__html__(),
                                   forum_standing.standing)))
        if (api_standing.entitytype != forum_standing.entitytype
            or api_standing.ticker != forum_standing.ticker):
            result.append(Message(api_standing.name,
                                  "%s has wrong ticker %s on the forums." %
                                  (api_standing.__html__(),
                                   forum_standing.tickerstring)))
    return result

def get_forum_standings():
    f = urllib.urlopen("http://www.electusmatari.com/standings/?format=xml")
    tree = ET.fromstring(f.read())
    result = []
    for standing in tree.findall("standing"):
        result.append(ForumStanding(standing.find("entity").text,
                                    standing.find("ticker").text,
                                    standing.find("value").text,
                                    standing.find("comments").text))
    return result

if __name__ == '__main__':
    main()
