#!/usr/bin/env python

# Update em.com standings list

import csv
import StringIO

import evelib.api as api
import emcom.ftp as ftp

def main():
    grd = api.corp()
    # standings = grd.Standings()
    contacts = grd.ContactList()
    s = StringIO.StringIO()
    w = csv.writer(s)
    for contact in contacts.allianceContactList:
        w.writerow(get_entity_row(contact))
    # for std in standings.allianceStandings.standingsTo.alliances:
    #     w.writerow(get_alliance_row(std))
    # for std in standings.allianceStandings.standingsTo.corporations:
    #     w.writerow(get_corporation_row(std))
    s.seek(0)
    ftp.upload("em-standings.txt", s)

_alliances = None
def get_alliance(allyid):
    global _alliances
    if _alliances is None:
        base = api.api()
        al = base.eve.AllianceList()
        _alliances = dict((x.allianceID, x) for x in al.alliances)
    return _alliances.get(allyid, None)

# type, name, ticker, id, standing, size, allyname, allyticker, allyid

def get_entity_row(contact):
    alliance = get_alliance_row(contact.contactID, contact.contactName,
                                contact.standing)
    if alliance is None:
        return get_corp_row(contact.contactID, contact.contactName,
                            contact.standing)
    else:
        return alliance

def get_alliance_row(contact_id, contact_name, standing):
    ally = get_alliance(contact_id)
    if ally is None: # disbanded
        (ticker, members) = ("", 0)
    else:
        (ticker, members) = (ally.shortName, ally.memberCount)
    return ["alliance", contact_name, ticker, contact_id, standing,
            members, "", "", ""]

def get_corporation_row(contact_id, contact_name, standing):
    base = api.api()
    corp = base.corp.CorporationSheet(corporationID=contact_id)
    (allyname, allyticker, allyid) = ("", "", "")
    if corp.allianceID != 0:
        ally = get_alliance(corp.allianceID)
        if ally is None:
            (allyname, allyticker, allyid) = ("", "", 0)
        else:
            (allyname, allyticker, allyid) = (ally.name, ally.shortName,
                                              ally.allianceID)

    return ["corporation", contact_name, corp.ticker, contact_id, standing,
            corp.memberCount, allyname, allyticker, allyid]

if __name__ == '__main__':
    main()
