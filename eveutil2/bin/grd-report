#!/usr/bin/env python

# TODO:
# - Unethical missions
# - Purchase above index
# - Sale below index

import datetime
from optparse import OptionParser

import evelib.newdb as db
import evelib.api as api
import emcom.gmi as gmi
from emcom import humane

def main():
    parser = OptionParser()
    parser.add_option("--after", dest="after_date", metavar="DATE",
                      help="Ignore entries before DATE",
                      default=None)
    parser.add_option("--before", dest="before_date", metavar="DATE",
                      help="Ignore entries past DATE",
                      default=None)
    (options, args) = parser.parse_args()
    now = datetime.datetime.utcnow()
    if options.before_date is None:
        before = now.replace(day=1, month=now.month + 1, hour=0, minute=0)
    else:
        before = datetime.datetime.strptime(options.before_date, "%Y-%m-%d")
    if options.after_date is None:
        after = now.replace(day=1, hour=0, minute=0)
    else:
        after = datetime.datetime.strptime(options.after_date, "%Y-%m-%d")
    index = gmi.HistoricIndex()
    conn = db.connect()

    t = get_transactions(conn, index, after, before)
    j = get_journal(conn, index, after, before)
    header(0, "Gradient Report")
    print "Using market data from %s to %s." % (after.strftime("%Y-%m-%d"),
                                                before.strftime("%Y-%m-%d"))
    print
    header(1, "Overview")
    print "[pre]"
    print "Total Market Profit..: %8s" % humane2(t.total_profit, "B")
    print "Total Tax Profit.....: %8s" % humane2(j.totaltaxes, "B")
    print "Office Rent..........: %8s" % humane2(j.totalofficefees, "B")
    print "Other Fees...........: %8s" % humane2(j.totalfees, "B")
    print "TOTAL................: %8s" % humane2(t.total_profit +
                                                 j.totaltaxes +
                                                 j.totalofficefees +
                                                 j.totalfees,
                                                 "B")
    print "Total Cash Flow......: %8s" % humane2(j.total, "B")
    print "[/pre]"
    print_market(t)
    print_cashflow(j)

CORP_ACCOUNTS = [1000, 1001, 1002, 1003, 1005]
MINERALS = ['Tritanium', 'Pyerite', 'Mexallon', 'Isogen',
            'Nocxium', 'Zydrine', 'Megacyte', 'Morphite']

def get_transactions(conn, index, after, before):
    c = conn.cursor()
    c.execute("SELECT account, date, quantity, typename, price, "
              "       charactername, stationname, transactiontype "
              "FROM grd_transactions "
              "WHERE date >= %s AND date < %s "
              "ORDER BY date ASC", (after, before))
    t = Transactions()
    for (account, date, qty, typename, price, charactername,
         stationname, transactiontype) in c.fetchall():
        if account not in CORP_ACCOUNTS:
            continue
        try:
            indexprice = index.get(typename, date)
        except:
            indexprice = None
        if transactiontype == 'buy':
            t.add_purchase(typename, qty, price, indexprice,
                           charactername, stationname)
        else:
            t.add_sale(typename, qty, price, indexprice,
                       charactername, stationname)
    return t

def get_journal(conn, index, after, before):
    c = conn.cursor()
    c.execute("SELECT account, date, reftypeid, ownername1, ownername2, "
              "       argname1, amount, reason "
              "FROM grd_journal "
              "WHERE date >= %s AND date < %s "
              "ORDER BY date ASC", (after, before))
    j = Journal(conn)
    for (account, date, reftypeid, ownername1, ownername2, argname1,
         amount, reason) in c.fetchall():
        if account not in CORP_ACCOUNTS:
            continue
        j.addentry(reftypeid, account, amount,
                   ownername1, ownername2, argname1, reason)
    return j

HEADER = ["[size=xx-large][b]%s[/b][/size]",
          "[size=x-large][b]%s[/b][/size]",
          "[size=large][b]%s[/b][/size]",
          "[b]%s[/b]",
          "[u]%s[/u]"]

def header(n, s):
    print HEADER[n] % s

def humane2(numeric, unit="M"):
    modifier = {'K': 1000.0,
                'M': 1000000.0,
                'B': 1000000000.0}
    return "%s %s" % (humane(numeric / modifier[unit]), unit)

def print_market(t):
    header(1, "Market")
    header(2, "Totals")
    print "[pre]"
    print "Total Market Profit..: %7s" % humane2(t.total_profit, "B")
    print "Total Sales Volume...: %7s" % humane2(t.total_sales_volume, "B")
    print "Total Purchase Volume: %7s" % humane2(t.total_purchasing_volume, "B")
    print "Total Sales Profit...: %7s" % humane2(t.total_sales_profit, "B")
    print "Total Purchase Profit: %7s" % humane2(t.total_purchasing_profit, "B")
    print "[/pre]"
    print
    header(2, "Sales")
    printlist("Volume per Sales Point", t.salespoint.getcosts()[:10])
    printlist("Profit per Sales Point", t.salespoint.getprofits()[:10])
    printlist("Volume per Sales Agent", t.salesagent.getcosts()[:10])
    printlist("Profit per Sales Agent", t.salesagent.getprofits()[:10])
    printlist("Volume per Sold Type", t.salestype.getcosts()[:10])
    printlist("Profit per Sold Type", t.salestype.getprofits()[:10])
    print
    header(2, "Acquisition")
    printlist("Volume per Purchase Point", t.purchasepoint.getcosts()[:10])
    printlist("Profit per Purchase Point", t.purchasepoint.getprofits()[:10])
    printlist("Volume per Purchase Agent", t.purchaseagent.getcosts()[:10])
    printlist("Profit per Purchase Agent", t.purchaseagent.getprofits()[:10])
    printlist("Volume per Purchased Type", t.purchasetype.getcosts()[:10])
    printlist("Profit per Purchased Type", t.purchasetype.getprofits()[:10])

def print_cashflow(j):
    header(1, "Cash Flow")
    header(2, "Totals")
    print "[pre]"
    print "Total Cash Flow...: %13s" % humane2(j.total)
    print "Contract Volume...: %13s" % humane2(j.totalcontracts)
    print "CONCORD Tax Volume: %13s" % humane2(j.totaltaxes)
    print "Fees..............: %13s" % humane2(j.totalfees)
    print "Office Rent.......: %13s" % humane2(j.totalofficefees)
    print "[/pre]"
    header(2, "Journal Overview")
    printlist("All Accounts", j.totals.getcosts())
    for account, totals in j.peraccount.items():
        if len(totals.getcosts()) > 0:
            printlist(account, totals.getcosts())
    header(2, "Expenses")
    printlist("Total Non-Market Expenses Per Pilot", j.pilotexpenses.getcosts()[:10])
    printlist("Office Payments", j.offices.getcosts()[:10])
    header(2, "Tax Income")
    printlist("Tax Income Per Pilot", j.pilottaxes.getcosts()[:10])
    printlist("Tax Income Per Agent", j.agenttaxes.getcosts()[:10])
    printlist("Tax Income Per System", j.systemtaxes.getcosts()[:10])
    printlist("Sansha Tax Income Per Pilot",
              j.pilotsanshataxes.getcosts()[:10])
    header(2, "Missions and Agents")
    printlist2("Most Active Mission Runner", j.pilotmissions.getcosts()[:10])
    printlist2("Most Active Sansha Hunter", j.pilotsansha.getcosts()[:10])
    printlist2("Most Missions Per Agent", j.agentmissions.getcosts()[:10])
    printlist2("Pilots Per Agent", j.agentpilots[:10])

def printlist(name, data):
    header(3, name)
    print "[pre]"
    for name, cost in data:
        print "%13s  %s" % (humane2(cost), name)
    print "[/pre]"

def printlist2(name, data):
    header(3, name)
    print "[pre]"
    for name, cost in data:
        print "%5s  %s" % (cost, name)
    print "[/pre]"

agtdescs = None
def agentdescription(conn, agentname):
   global agtdescs
   if agtdescs is None:
      c = conn.cursor()
      c.execute("SELECT an.itemname, a.level, sys.solarsystemname, "
                "       cn.itemname, at.agenttype "
                "FROM invnames an "
                "     INNER JOIN agtagents a "
                "       ON an.itemid = a.agentid "
                "     INNER JOIN invnames cn " 
                "       ON a.corporationid = cn.itemid "
                "     LEFT JOIN stastations st "
                "       ON a.locationid = st.stationid "
                "     LEFT JOIN mapsolarsystems sys "
                "       ON st.solarsystemid = sys.solarsystemid "
                "     INNER JOIN agtagenttypes at "
                "       ON a.agenttypeid = at.agenttypeid ")
      agtdescs = {}
      for (name, level, system, corp, agttype) in c.fetchall():
         if agttype == 'GenericStorylineMissionAgent':
            level_desc = "important"
         elif agttype == 'EpicArcAgent':
            level_desc = "epic"
         else:
            level_desc = "L%s" % level
         if system is None:
            system = "in space"
         agtdescs[name] = "%s (%s, %s %s)" % (name, system, level_desc, corp)
   return agtdescs.get(agentname, agentname)

class Transactions(object):
    def __init__(self):
        self.total_profit = 0
        self.total_sales_volume = 0
        self.total_sales_profit = 0
        self.total_purchasing_volume = 0
        self.total_purchasing_profit = 0
        self.salespoint = TopList()
        self.salesagent = TopList()
        self.salestype = TopList()
        self.purchasepoint = TopList()
        self.purchaseagent = TopList()
        self.purchasetype = TopList()

    def add_purchase(self, typename, qty, paid, index, agent, location):
        self.total_purchasing_volume += qty * paid
        if index is not None:
            self.total_profit += qty * (index - paid)
            self.total_purchasing_profit += qty * (index - paid)
        self.purchasepoint.add(location, qty * paid,
                               qty * index
                               if index is not None else None,
                               sale=False)
        self.purchaseagent.add(agent, qty * paid,
                               qty * index
                               if index is not None else None,
                               sale=False)
        self.purchasetype.add(typename, qty * paid,
                              qty * index
                              if index is not None else None,
                              sale=False)

    def add_sale(self, typename, qty, paid, index, agent, location):
        self.total_sales_volume += qty * paid
        if index is not None:
            self.total_profit += qty * (paid - index)
            self.total_sales_profit += qty * (paid - index)
        self.salespoint.add(location, qty * paid,
                            qty * index
                            if index is not None else None,
                            sale=True)
        self.salesagent.add(agent, qty * paid,
                            qty * index
                            if index is not None else None,
                            sale=True)
        self.salestype.add(typename, qty * paid,
                           qty * index
                           if index is not None else None,
                            sale=True)

class Journal(object):
    def __init__(self, conn):
        self.conn = conn
        self.reftypes = dict((row.refTypeID, row.refTypeName)
                             for row in api.api().eve.RefTypes().refTypes)
        self.accountnames = dict((row.accountKey, row.description)
                                 for row in api.corp().CorporationSheet().walletDivisions)
        self.total = 0
        self.totaltaxes = 0
        self.totalcontracts = 0
        self.totalfees = 0
        self.totalofficefees = 0
        self.totals = TopList()
        self.peraccount = dict((name, TopList())
                               for name in self.accountnames.values())
        self.offices = TopList()
        self.pilotexpenses = TopList()
        self.pilottaxes = TopList()
        self.pilotmissions = TopList()
        self.pilotsansha = TopList()
        self.pilotsanshataxes = TopList()
        self.agenttaxes = TopList()
        self._agentpilots = {}
        self.agentmissions = TopList()
        self.systemtaxes = TopList()

    @property
    def agentpilots(self):
        return sorted([(agentdescription(self.conn, agent), len(pilots))
                       for (agent, pilots) in self._agentpilots.items()],
                      key=lambda a: (-a[1], a[0]))

    def addentry(self, reftypeid, account, amount,
                 ownername1, ownername2, argname1, reason):
        reftypename = self.reftypes[reftypeid]
        accountname = self.accountnames[account]

        self.total += amount
        self.totals.add(reftypename, amount)
        self.peraccount[accountname].add(reftypename, amount)

        if reftypeid == 13: # Office Rental Fee
            self.totalofficefees += amount
            self.offices.add(ownername2, -1 * amount)
        elif reftypeid == 33: # Agent Mission Reward
            agent = argname1
            pilot = ownername2
            self.totaltaxes += amount
            self.pilotmissions.add(pilot, 1)
            self.agenttaxes.add(agentdescription(self.conn, agent), amount)
            self._agentpilots.setdefault(agent, set())
            self._agentpilots[agent].add(pilot)
            self.agentmissions.add(agentdescription(self.conn, agent), 1)
        elif reftypeid == 34: # Agent Mission Time Bonus Reward
            agent = argname1
            pilot = ownername2
            self.totaltaxes += amount
            self.pilottaxes.add(pilot, amount)
            self.agenttaxes.add(agentdescription(self.conn, agent), amount)
            self._agentpilots.setdefault(agent, set())
            self._agentpilots[agent].add(pilot)
        elif reftypeid == 37: # Corporation Account Withdrawal
            if amount < 0 and not (ownername1 == ownername2 == 'Gradient'):
                self.pilotexpenses.add(argname1, -1 * amount)
        elif reftypeid == 46: # Brokers Fee
            self.totalfees += amount
        elif reftypeid == 54: # Transaction Tax
            self.totalfees += amount
        elif reftypeid == 56: # Manufacturing
            self.totalfees += amount
        elif reftypeid == 57: # Researching Technology
            self.totalfees += amount
        elif reftypeid == 71: # Contract Price
            self.totalcontracts += amount
        elif reftypeid == 79: # Contract Price Payment (corp)
            if amount < 0:
                self.pilotexpenses.add(ownername1, -1 * amount)
        elif reftypeid == 80: # Contract Brokers Fee (corp)
            self.totalcontracts += amount
            self.totalfees += amount
        elif reftypeid == 85: # Bounty Prizes
            pilot = ownername2
            system = argname1
            self.totaltaxes += amount
            self.pilottaxes.add(pilot, amount)
            self.systemtaxes.add(system, amount)
        elif reftypeid == 99: # Corporate Reward Payout (Sansha)
            pilot = ownername2
            self.totaltaxes += amount
            self.pilotsanshataxes.add(pilot, amount)
            self.pilotsansha.add(pilot, 1)

class TopList(object):
    def __init__(self):
        self.costs = {}
        self.profits = {}
        self.indexcost = {}
        self.profitcost = {}

    def add(self, name, cost, index=None, sale=True):
        self.costs.setdefault(name, 0)
        self.costs[name] += cost
        if index is not None and index > 0:
            self.indexcost.setdefault(name, 0)
            self.profitcost.setdefault(name, 0)
            self.profits.setdefault(name, 0)
            if sale:
                self.indexcost[name] += index
                self.profitcost[name] += cost
                self.profits[name] += (cost - index)
            else:
                self.indexcost[name] += cost
                self.profitcost[name] += index
                self.profits[name] += (index - cost)

    def getcosts(self):
        return sorted(self.costs.items(), key=lambda a: a[1],
                      reverse=True)

    def getprofits(self):
        result = []
        for typename, profit in sorted(self.profits.items(),
                                       key=lambda a: a[1],
                                       reverse=True):
            result.append(("%s (%.1f%%)" % (typename,
                                            100*(1-(self.indexcost[typename] / self.profitcost[typename]))
                                            ),
                           profit))
        return result

main()
