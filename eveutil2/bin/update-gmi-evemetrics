#!/usr/bin/env python

import csv
import datetime
import json
import os
import StringIO
import xml.etree.ElementTree as ET

import evelib.newdb as evedb
import emcom.gmi as gmi
import emcom.ftp as ftp

from emcom import humane, showinfo

db = None

def main():
    global db
    db = evedb.connect()
    rows, updates = getrows()
    csvdata = make_csv(rows, updates)
    htmldata = make_html(rows, updates)
    xmldata = make_xml(rows, updates)
    updatedata = make_update(rows, updates)
    calcdata = make_calc(rows, updates)
    now = datetime.datetime.now()
    csvname = now.strftime("gmi-%Y-%m-%d.txt")
    htmlname = now.strftime("gmi-%Y-%m-%d.html")
    xmlname = now.strftime("gmi-%Y-%m-%d.xml")
    files = [(csvdata, "current.txt"),
             (csvdata, csvname),
             (htmldata, "current.html"),
             (htmldata, htmlname),
             (xmldata, "current.xml"),
             (xmldata, xmlname),
             (updatedata, "current-suggestions.html"),
             (calcdata, "current-calculator.html")]
    for data, filename in files:
        f = file(os.path.join(gmi.LOCALDIR, filename), "w")
        f.write(data)
        f.close()
    ftp.uploadmany([(filename, StringIO.StringIO(data))
                    for (data, filename) in files],
                   'gmi')

def getrows():
    rows = []
    updates = {}
    for name, kind in gmi.TYPE_DATA:
        if kind is not None:
            rows.append([name, "", "", "", "", "", "", ""])
            continue
        index, last = get_index(name)
        updates[name] = last
        rows.append([name,
                     "%.2f" % index['republic'],
                     "%+.1f%%" % index['change'],
                     "%i" % index['movement'],
                     "%.2f" % index.get('Heimatar', 0.0),
                     "%.2f" % index.get('Metropolis', 0.0),
                     "%.2f" % index.get('Molden Heath', 0.0),
                     "%.2f" % index.get('The Forge', 0.0)
                     ])
    return rows, updates

def get_index(typename):
    typeobj = evedb.invTypes.get(typename=typename)
    result = {}
    c = db.cursor()
    # Get the region values
    for region in ['Heimatar', 'Metropolis', 'Molden Heath', 'The Forge']:
        c.execute("SELECT SUM(avg*movement), SUM(movement) "
                  "FROM market_history h, "
                  "     ccp.mapregions r "
                  "WHERE h.regionid = r.regionid "
                  "  AND r.regionname = %s "
                  "  AND typeid = %s "
                  "GROUP BY h.day "
                  "ORDER BY h.day DESC "
                  "LIMIT 7",
                  (region, typeobj.typeid,))
        total = 0
        movement = 0
        for (t, m) in c.fetchall():
            total += t
            movement += m
        if movement == 0:
            result[region] = 0.0
        else:
            result[region] = total / float(movement)
    # Republic average
    c.execute("SELECT MAX(day) "
              "FROM market_history h, "
              "     ccp.mapregions r "
              "WHERE h.regionid = r.regionid "
              "  AND h.typeid = %s "
              "  AND r.regionname in ('Heimatar', "
              "                       'Metropolis', "
              "                       'Molden Heath') ",
              (typeobj.typeid,))
    (lastday,) = c.fetchone()
    now = datetime.datetime.utcnow().date()
    # If the trade volume in the Republic is too small, we use the
    # trade value of Jita
    if lastday is None or (now - lastday).days > 7:
        result['republic'] = result['The Forge']
        result['movement'] = 0
    else:
        c.execute("SELECT SUM(avg*movement), SUM(movement) "
                  "FROM market_history h, "
                  "     ccp.mapregions r "
                  "WHERE h.regionid = r.regionid "
                  "  AND typeid = %s "
                  "  AND r.regionname in ('Heimatar', "
                  "                       'Metropolis', "
                  "                       'Molden Heath') "
                  "GROUP BY h.day "
                  "ORDER BY h.day DESC "
                  "LIMIT 7",
                  (typeobj.typeid,))
        total = 0
        movement = 0
        for (t, m) in c.fetchall():
            total += t
            movement += m
        result['republic'] = total / float(movement)
        result['movement'] = movement
    # If this also fails, we go for nothing
    if result['republic'] in (0.0, None):
        result['republic'] = 0.0
        result['movement'] = 0
    # Get the last day in the Republic
    c.execute("SELECT sum(avg*movement) / sum(movement) "
              "FROM market_history h, "
              "     ccp.mapregions r "
              "WHERE h.regionid = r.regionid "
              "  AND typeid = %s "
              "  AND r.regionname in ('Heimatar', "
              "                       'Metropolis', "
              "                       'Molden Heath') "
              "GROUP BY day "
              "ORDER BY day DESC "
              "LIMIT 1",
              (typeobj.typeid,))
    if c.rowcount == 1:
        (lastday,) = c.fetchone()
    else:
        lastday = 0.0
    if lastday is not None and result['republic'] != 0.0:
        result['change'] = ((lastday / result['republic']) - 1) * 100
    else:
        result['change'] = 100.0
    c.execute("SELECT r.regionname, MAX(h.day) "
              "FROM market_history h, "
              "     ccp.mapregions r "
              "WHERE h.regionid = r.regionid "
              "  AND typeid = %s "
              "GROUP BY r.regionname",
              (typeobj.typeid,))
    lastupdate = dict(c.fetchall())
    return result, lastupdate

def make_csv(rows, updates):
    s = StringIO.StringIO()
    w = csv.writer(s)
    w.writerow(['Typename', 'Index', 'Change to Last Day', 'Movement',
                'Heimatar', 'Metropolis', 'Molden Heath', 'Jita'])
    w.writerows(rows)
    s.seek(0)
    return s.read()

def make_html(rows, updates):
    s = StringIO.StringIO()
    s.write("<html>\n"
            "<head>\n"
            '<title>Gradient Material Index</title>\n'
            '<style type="text/css">\n'
            'html {\n'
            '  font-family: sans-serif;\n'
            '}\n'
            'table {\n'
            '  border-collapse: collapse;\n'
            '}\n'
            'td, th {\n'
            '  border: 1px solid black;\n'
            '}\n'
            'th {\n'
            '  background: #CFCFCF;\n'
            '}\n'
            'tr.even td {\n'
            '  background: #EFEFEF;\n'
            '}\n'
            'td.typename {\n'
            '  text-align: left;\n'
            '}\n'
            'td.number {\n'
            '  text-align: right;\n'
            '}\n'
            '.old, tr.even td.old {\n'
            '  background-color: #FFEA7F;\n'
            '}\n'
            '.veryold, tr.even td.veryold {\n'
            '  background-color: #FFB57F;\n'
            '}\n'
            '.never, tr.even td.never {\n'
            '  background-color: #FF7F7F;\n'
            '}\n'
            '</style>\n'
            "</head>\n"
            "<body>\n"
            "<h1>Gradient Material Index</h1>\n"
            '<p><span class="old">Yellow entries</span> have not been '
            'updated or had no movement for over three days. '
            '<span class="veryold">Orange entries</span> have not been '
            'updated or had no movement for a week or more. '
            '<span class="never">Red entries</span> have never been '
            'traded.</p>\n'
            '<p>The index is also available in <a href="current.txt">CSV</a> '
            'and <a href="current.xml">XML</a> formats. In addition, there '
            'is a <a href="current-calculator.html">calculator</a> and '
            'an <a href="current-suggestions.html">uploader</a> to keep '
            'the index current.</p>'
            )

    header = ("<tr>"
              "<th>Typename</th>"
              "<th>Index</th>"
              "<th>Change to Last Day</th>"
              "<th>Movement</th>"
              "<th>Heimatar</th>"
              "<th>Metropolis</th>"
              "<th>Molden Heath</th>"
              "<th>Jita</th>"
              "</tr>\n")
    s.write("<table>\n")
    now = datetime.datetime.utcnow().date()
    odd = True
    for row in rows:
        if row[1] == "":
            odd = True
            s.write('<tr><th colspan="8">%s</th></tr>\n' % row[0])
            if row[0] != "":
                s.write(header)
        else:
            tn, index, change, movement, heim, metro, mh, jita = row
            if odd:
                classname = "odd"
                odd = False
            else:
                classname = "even"
                odd = True

            midnight = datetime.time(0, 0)
            lu = updates[tn]
            regcls = {}
            for reg in ['Heimatar', 'Metropolis', 'Molden Heath', 'The Forge']:
                if reg not in lu:
                    regcls[reg] = 'never'
                elif (now - lu[reg]).days > 8:
                    regcls[reg] = 'veryold'
                elif (now - lu[reg]).days > 4:
                    regcls[reg] = 'old'
                else:
                    regcls[reg] = ''
            typeobj = evedb.invTypes.get(typename=tn)
            s.write('<tr class="%s">'
                    '<td class="typename">%s</td>'
                    '<td class="number">%s</td>'
                    '<td class="number">%s</td>'
                    '<td class="number">%s</td>'
                    '<td class="number %s">%s</td>'
                    '<td class="number %s">%s</td>'
                    '<td class="number %s">%s</td>'
                    '<td class="number %s">%s</td>'
                    '</tr>\n'
                    % (classname,
                       showinfo(tn, typeobj.typeid),
                       humane(float(index)), change,
                       humane(int(movement)),
                       regcls['Heimatar'], humane(float(heim)),
                       regcls['Metropolis'], humane(float(metro)),
                       regcls['Molden Heath'], humane(float(mh)),
                       regcls['The Forge'], humane(float(jita))))
    s.write("</table>"
            "</body>"
            "</html>")
    s.seek(0)
    return s.read()

def make_xml(rows, updates):
    root = ET.Element("index")
    for row in rows:
        if row[1] == '':
            continue
        tn = row[0]
        index = row[1]
        item = ET.SubElement(root, "item")
        item.set("name", tn)
        item.set("price", index)
    tree = ET.ElementTree(root)
    s = StringIO.StringIO()
    tree.write(s)
    s.seek(0)
    return s.read()

def make_update(rows, updates):
    lis = [str(evedb.invTypes.get(typename=row[0]).typeid)
           for row in rows if row[1] != ""]
    lis.reverse()
    return """<html>
<head>
<title>Gradient Material Index - Uploader</title>
<script type="text/javascript">
var typeids = new Array(%s);
var origlen = typeids.length + 1;
var pause = true;
var timeout = false;
function checktypes () {
    if (!pause && typeids.length > 0) {
        status("Running " + (origlen - typeids.length) 
               + " / " + (origlen - 1));
        CCPEVE.showMarketDetails(typeids.pop());
        timeout = setTimeout(checktypes, 3000);
    }
}
function toggle_pause () {
    if (timeout) {
        clearTimeout(timeout);
        timeout = false;
    }
    if (pause) {
        pause = false;
        timeout = setTimeout(checktypes, 3000);
        status("Running");
    } else {
        pause = true;
        status("Paused");
    }
}
function status (text) {
    var st = document.getElementById("status");
    st.innerHTML = text;
}
</script>
</head>
<body>
<h1>Gradient Material Index Uploader</h1>
<p>Please open a market window and select the <b>history</b>
tab. This makes sure that you upload history data. You also
need the <a href="http://eve-metrics.com/downloads">EVE Metrics
downloader</a> installed, set up and running.</p>
<p>The whole process will take about 18 minutes.</p>
<p><b>Status:</b> <span id="status">Not running</span></p>
<button onClick="toggle_pause()">Check / Pause</button>
</body></html>
""" % (",".join(lis),)

def make_calc(rows, updates):
    return """<html>
<head>
<title>Gradient Material Index - Calculator</title>
<script type="text/javascript" src="/js/jquery.js"></script>
<script type="text/javascript" src="/js/calc.js"></script>
<script type="text/javascript">
$(function () {
     calculator($("#result"), $("#search"), $("#data"), %s);
});
</script>

<style type="text/css">
body {
    font-family: sans-serif;
}

#searchdiv span {
    border: 2px solid black;
    padding: 0.5em 1em;
}
#searchdiv {
    margin: 1em 0;
}

.data, .result {
    border-collapse: collapse;
    border: 1px solid #AFAFAF;
}

.data th, .result th {
    background: #CFCFCF;
    border: #AFAFAF;
}
.totalprice {
    background: #CFCFCF;
}

.data td, .result td {
    padding: 0 0.5em;
}

.odd {
    background: #EFEFEF;
}

.qty, .price, .quantity, .singleprice, .sumprice, .totalprice {
    text-align: right;
}

.total th {
    text-align: left;
}

.modifier {
    margin-bottom: 1em;
}
</style>
</head>

<body>
<h1>Gradient Material Index - Calculator</h1>

<div id="result"></div>

<div id="searchdiv"><span>Search:
<input type="text" id="search"></input>
</span></div>

<div id="data"></div>

</body> </html>""" % (json.dumps([[row[0], float(row[1])] for row in rows
                                  if row[1] != '']),)

if __name__ == '__main__':
    main()
