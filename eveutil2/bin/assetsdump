#!/usr/bin/env python

import gzip
import sys

import emcom.grd as grd

import evelib.newdb as db
import evelib.eveapi as eveapi
import evelib.api as api

from evelib.util import humane

conn = db.connect()

def main():
    if sys.argv[1].endswith(".gz"):
        f = gzip.GzipFile(sys.argv[1])
    else:
        f = file(sys.argv[1])

    data = eveapi._Parser().Parse(f, True)
    tree = build_tree(data.result.assets)

    prices = grd.prices()
    for item in tree:
        item.update_prices(prices)

    tree.sort(lambda a, b: cmp((b.price, a.name), (a.price, b.name)))
    print """<html><header>
<style type="text/css">
.header {
    background: #CFCFCF;
    border: 1px solid #AFAFAF;
}
.contents {
    padding-left: 1em;
}
.indented {
    padding-left: 1em;
}
</style>
<script type="text/javascript" src="js/jquery.js"></script>
<script type="text/javascript" src="js/jquery.tablesorter.js"></script>
<script type="text/javascript">
$(document).ready(function () {
  $(".contents").hide();
  $(".header").click(function () {
    $(this).next(".contents").slideToggle();
  });
});
</script>
</header><body>
"""
    for location in tree:
        emit_item(location, 0)
    print "</body></html>"

def emit_item(item, depth):
    descr = item.name
    if not item.singleton:
        descr += " x %s" % humane(item.quantity)
    if item.rawquantity == -2:
        descr += " (Copy)"
    if item.price > 0:
        descr += " (%s)" % humane(item.price)
    if len(item.slots) > 0:
        print '<div class="header">%s</div>' % descr
    else:
        print '<div>%s</div>' % descr
    slots = item.slots.items()
    slots.sort(lambda a, b: cmp((sum(item.price for item in b[1]), a[0]),
                                (sum(item.price for item in a[1]), b[0])))
    if len(slots) > 0:
        print '<div class="contents">'
        for name, contents in slots:
            if len(contents) > 0:
                print '<div class="header">%s (%s)</div>' % (
                    name,
                    humane(sum(item.price for item in contents)))
            else:
                print '<div>%s (%s)</div>' % (
                    name,
                    humane(sum(item.price for item in contents)))
            contents.sort(lambda a, b: cmp((b.price, a.name), (a.price, b.name)))
            if len(contents) > 0:
                print '<div class="contents">'
                for subitem in contents:
                    emit_item(subitem, depth + 1)
                print '</div>'
        print "</div>"

def build_tree(assets):
    locations = {}
    for row in assets:
        locname = locationid2name(row.locationID)
        if locname in locations:
            location = locations[locname]
        else:
            location = Item(locationid2name(row.locationID))
            locations[locname] = location
        location.add_row(row)
    return locations.values()

class Item(object):
    def __init__(self, name, itemid=0, quantity=1, singleton=True, typeid=0,
                 rawquantity=None):
        self.name = name
        self.itemid = itemid
        self.quantity = quantity
        self.rawquantity = rawquantity
        self.singleton = singleton
        self.typeid = typeid
        self.slots = {}
        self.price = 0

    def __repr__(self):
        return "<Item %s>" % self.name

    def add_item(self, flagname, item):
        self.slots.setdefault(flagname, [])
        self.slots[flagname].append(item)

    def add_row(self, row):
        item = Item(typeid2name(row.typeID),
                    row.itemID, row.quantity, bool(row.singleton),
                    row.typeID, getattr(row, 'rawQuantity', None))
        if hasattr(row, 'contents'):
            for row2 in row.contents:
                item.add_row(row2)
        self.add_item(flagid2name(row.flag), item)

    def update_prices(self, prices):
        total = 0
        for itemlist in self.slots.values():
            for item in itemlist:
                item.update_prices(prices)
                total += item.price
        total += prices.get(self.name, 0.0) * self.quantity
        self.price = total

_typename = None
def typeid2name(typeid):
    global _typename
    if _typename is None:
        c = conn.cursor()
        c.execute("SELECT typeid, typename FROM ccp.invtypes")
        _typename = dict(c.fetchall())
    return _typename.get(typeid, "<typeid %s>" % typeid)

_flagname = None
def flagid2name(flagid):
    global _flagname
    if _flagname is None:
        corp = api.corp()
        sheet = corp.CorporationSheet()
        division = dict(sheet.divisions._rows)
        c = conn.cursor()
        c.execute("SELECT flagid, flagname FROM ccp.invflags")
        _flagname = dict(c.fetchall())
        for flagid in _flagname:
            if _flagname[flagid] == 'CorpMarket':
                _flagname[flagid] = 'DELIVERIES'
            if _flagname[flagid].startswith("CorpSAG"):
                _flagname[flagid] = division[int(_flagname[flagid][-1]) + 999]
            if _flagname[flagid] == 'Hangar':
                _flagname[flagid] = division[1000]
    return _flagname.get(flagid, "<flagid %s>" % flagid)

_locations = None
def locationid2name(locationid):
    global _locations
    if _locations is None:
        c = conn.cursor()
        _locations = {}
        c.execute("SELECT stationid, stationname FROM ccp.stastations")
        for staid, name in c.fetchall():
            _locations[staid] = name
            _locations[staid + 6000001] = name
        c.execute("SELECT solarsystemid, solarsystemname "
                  "FROM ccp.mapsolarsystems")
        _locations.update(dict(c.fetchall()))
    return _locations.get(locationid, "<locationid %s>" % locationid)

if __name__ == '__main__':
    main()
