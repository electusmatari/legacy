#!/usr/bin/env python

import sys

import emcom.gmi as gmi
from emcom import humane
import evelib.newdb as db

def main():
    conn = db.connect()
    c = conn.cursor()
    t1name = sys.argv[1]
    c.execute("SELECT t.typeid AS typeid, "
              "       mt.typename AS materialtypename, "
              "       tm.quantity AS qty "
              "FROM ccp.invtypematerials tm "
              "     INNER JOIN ccp.invtypes t ON tm.typeid = t.typeid "
              "     INNER JOIN ccp.invtypes mt "
              "       ON tm.materialtypeid = mt.typeid "
              "WHERE t.typename = %s",
              (t1name,))
    base = []
    typeid = None
    for typeid_, material, qty in c.fetchall():
        typeid = typeid_
        base.append((material, qty))
    c.execute("SELECT t.typename AS typename, "
              "       mt.typename AS materialtypename, "
              "       tm.quantity AS qty "
              "FROM ccp.invtypematerials tm "
              "     INNER JOIN ccp.invtypes t ON tm.typeid = t.typeid "
              "     INNER JOIN ccp.invtypes mt "
              "       ON tm.materialtypeid = mt.typeid "
              "     INNER JOIN ccp.invmetatypes meta "
              "       ON t.typeid = meta.typeid "
              "WHERE meta.parenttypeid = %s "
              "  AND meta.metagroupid = 1",
              (typeid,))
    meta = {}
    for typename, material, qty in c.fetchall():
        meta.setdefault(typename, [])
        meta[typename].append((material, qty))
    for v in meta.values():
        v.sort(sortmats)
    print t1name
    print "=" * len(t1name)
    index = gmi.current()
    printone(base, index)
    for name, mats in meta.items():
        print
        print name
        print "=" * len(name)
        printone(mats, index)

def printone(mats, index):
    sum_ = 0
    for mat, qty in mats:
        price = index[mat] * qty
        sum_ += price
        print "%15s %s x %s" % (humane(price), mat, humane(qty))
    print "-" * 15
    print "%15s" % humane(sum_)

_order = ['Tritanium', 'Pyerite', 'Mexallon', 'Isogen',
          'Nocxium', 'Zydrine', 'Megacyte', 'Morphite']

def sortmats(a, b):
    if a[0] in _order and b[0] in _order:
        return cmp((_order.index(a[0]), a[1]),
                   (_order.index(b[0]), b[1]))
    else:
        return cmp(a, b)


if __name__ == '__main__':
    main()
