#!/usr/bin/env python

import csv
import StringIO
import sys

import evelib.newdb as db
import emcom.gmi as gmi
import emcom.ftp as ftp

def main():
    conn = db.connect()
    c = conn.cursor()
    items = get_items(c)
    components = get_components(c)
    index = gmi.current()
    s = StringIO.StringIO()
    w = csv.writer(s)
    itemlist = items.values()
    itemlist.sort(itemcmp)
    for item in itemlist:
        item.components = components.get(item.name, [])
        item.calculate(index, items)
        if not item.disabled:
            w.writerow([str(item), item.index, item.production, item.profit,
                        item.movement, item.jita_index, item.jita_production])
    s.seek(0)
    ftp.upload("grd-pi.txt", s)

SORTMAP = {'R0': 0,
           'P1': 1,
           'P2': 2,
           'P3': 3,
           'P4': 4,
           'product': 5}
def itemcmp(a, b):
    return cmp(SORTMAP[a.extra],
               SORTMAP[b.extra])

PITYPEMAP = {
    'Aqueous Liquids': 'R0',
    'Autotrophs': 'R0',
    'Base Metals': 'R0',
    'Carbon Compounds': 'R0',
    'Complex Organisms': 'R0',
    'Felsic Magma': 'R0',
    'Heavy Metals': 'R0',
    'Ionic Solutions': 'R0',
    'Micro Organisms': 'R0',
    'Noble Gas': 'R0',
    'Noble Metals': 'R0',
    'Non-CS Crystals': 'R0',
    'Planktic Colonies': 'R0',
    'Reactive Gas': 'R0',
    'Suspended Plasma': 'R0',

    'Bacteria': 'P1',
    'Biofuels': 'P1',
    'Biomass': 'P1',
    'Chiral Structures': 'P1',
    'Electrolytes': 'P1',
    'Industrial Fibers': 'P1',
    'Oxidizing Compound': 'P1',
    'Oxygen': 'P1',
    'Plasmoids': 'P1',
    'Precious Metals': 'P1',
    'Proteins': 'P1',
    'Reactive Metals': 'P1',
    'Silicon': 'P1',
    'Toxic Metals': 'P1',
    'Water': 'P1',

    'Biocells': 'P2',
    'Construction Blocks': 'P2',
    'Consumer Electronics': 'P2',
    'Coolant': 'P2',
    'Enriched Uranium': 'P2',
    'Fertilizer': 'P2',
    'Genetically Enhanced Livestock': 'P2',
    'Livestock': 'P2',
    'Mechanical Parts': 'P2',
    'Microfiber Shielding': 'P2',
    'Miniature Electronics': 'P2',
    'Nanites': 'P2',
    'Oxides': 'P2',
    'Polyaramids': 'P2',
    'Polytextiles': 'P2',
    'Rocket Fuel': 'P2',
    'Silicate Glass': 'P2',
    'Superconductors': 'P2',
    'Supertensile Plastics': 'P2',
    'Synthetic Oil': 'P2',
    'Test Cultures': 'P2',
    'Transmitter': 'P2',
    'Viral Agent': 'P2',
    'Water-Cooled CPU': 'P2',

    'Biotech Research Reports': 'P3',
    'Camera Drones': 'P3',
    'Condensates': 'P3',
    'Cryoprotectant Solution': 'P3',
    'Data Chips': 'P3',
    'Gel-Matrix Biopaste': 'P3',
    'Guidance Systems': 'P3',
    'Hazmat Detection Systems': 'P3',
    'Hermetic Membranes': 'P3',
    'High-Tech Transmitters': 'P3',
    'Industrial Explosives': 'P3',
    'Neocoms': 'P3',
    'Nuclear Reactors': 'P3',
    'Planetary Vehicles': 'P3',
    'Robotics': 'P3',
    'Smartfab Units': 'P3',
    'Supercomputers': 'P3',
    'Synthetic Synapses': 'P3',
    'Transcranial Microcontrollers': 'P3',
    'Ukomi Superconductors': 'P3',
    'Vaccines': 'P3',

    'Broadcast Node': 'P4',
    'Integrity Response Drones': 'P4',
    'Nano-Factory': 'P4',
    'Organic Mortar Applicators': 'P4',
    'Recursive Computing Module': 'P4',
    'Self-Harmonizing Power Core': 'P4',
    'Sterile Conduits': 'P4',
    'Wetware Mainframe': 'P4',
    }

EXPORTTAX = {
    'R0': 0.1,
    'P1': 0.76,
    'P2': 9.0,
    'P3': 600.0,
    'P3/2': 600.0,
    'P3/3': 600.0,
    'P4': 50000.0
    }

def get_items(c):
    items = {}
    # Planetary commodities
    c.execute("""
SELECT DISTINCT t.typename
FROM ccp.planetschematicstypemap m
     INNER JOIN ccp.invtypes t
       ON m.typeid = t.typeid
""")
    for (typename,) in c.fetchall():
        items[typename] = PIItem(typename,
                                 PITYPEMAP.get(typename, "product"))
    # Final products
    c.execute("""
SELECT t.typename
FROM ccp.invtypes t 
WHERE EXISTS (
    SELECT *
    FROM ccp.ramtyperequirements rtr
         INNER JOIN ccp.invtypes rt
           ON rtr.requiredtypeid = rt.typeid
         INNER JOIN ccp.invgroups rg 
           ON rt.groupid = rg.groupid
         INNER JOIN ccp.invblueprinttypes bpt
           ON rtr.typeid = bpt.blueprinttypeid
    WHERE bpt.producttypeid = t.typeid
      AND rg.groupname = 'Advanced Commodities'
) 
""")
    for (typename,) in c.fetchall():
        items[typename] = PIItem(typename, "product")
    return items

def get_components(c):
    components = {}

    schematicsout = {}
    schematicsin = {}
    c.execute("""
SELECT m.schematicid, m.isinput, t.typename, m.quantity
FROM ccp.planetschematicstypemap m
     INNER JOIN ccp.invtypes t
       ON m.typeid = t.typeid
""")
    for schematic, isinput, typename, quantity in c.fetchall():
        if isinput:
            schematicsin.setdefault(schematic, [])
            schematicsin[schematic].append((typename, quantity))
        else:
            schematicsout[schematic] = (typename, quantity)
    for (schematic, (typename, quantity)) in schematicsout.items():
        components.setdefault(typename, [])
        for (compname, compqty) in schematicsin[schematic]:
            components[typename].append((compname, float(compqty)/quantity))

    c.execute("""
SELECT pt.typename, rt.typename, rtr.quantity
FROM ccp.ramtyperequirements rtr
     INNER JOIN ccp.invblueprinttypes bpt
       ON rtr.typeid = bpt.blueprinttypeid
     INNER JOIN ccp.invtypes pt
       ON bpt.producttypeid = pt.typeid
     INNER JOIN ccp.invtypes rt
       ON rtr.requiredtypeid = rt.typeid
WHERE rtr.damageperjob > 0
""")
    for product, required, qty in c.fetchall():
        components.setdefault(product, [])
        components[product].append((required, qty))
    return components

class PIItem(object):
    def __init__(self, name, extra=None):
        self.name = name
        self.extra = extra
        self.index = None
        self.production = None
        self.movement = None
        self.jita_index = None
        self.jita_production = None
        self.components = None
        self.disabled = False

    def __str__(self):
        if self.extra is None:
            return self.name
        else:
            return "%s (%s)" % (self.name, self.extra)

    @property
    def profit(self):
        if self.index == 0:
            return 0
        else:
            return 1 - (self.production / self.index)

    def calculate(self, index, items):
        self.index = index.get(self.name, None)
        if self.index is not None:
            self.movement = self.index.republicvolume
            self.jita_index = self.index.jita
        else:
            row = get_production_row(self.name)
            if row is None:
                self.disabled = True
                return
            else:
                (price, heim, heimmov, jita) = row
            self.index = heim
            self.movement = heimmov
            self.jita_index = jita
        self.production = 0
        self.jita_production = 0
        if self.extra == 'P3':
            self.extra = "P3/%s" % len(self.components)
        if self.extra != 'P1':
            for component, qty in self.components:
                price = index.get(component, None)
                if price is None:
                    row = get_production_row(component)
                    if row is None:
                        self.disabled = True
                        return
                    else:
                        (price, heim, heimmov, jita) = row
                self.production += price * qty
                if hasattr(price, 'jita'):
                    self.jita_production += price.jita * qty
                else:
                    self.jita_production += price * qty
        if self.extra in EXPORTTAX:
            # export = 2 * import
            self.production += EXPORTTAX[self.extra]
            self.jita_production += EXPORTTAX[self.extra]
            if self.extra != 'P1':
                for component, qty in self.components:
                    item = items[component]
                    self.production += EXPORTTAX[item.extra] * qty * 0.5
                    self.jita_production += EXPORTTAX[item.extra] * qty * 0.5

_production = None
def get_production_row(typename):
    global _production
    if _production is None:
        r = csv.reader(file("/home/forcer/public_html/eve/grd-pricelist.txt"))
        _production = dict((row[0], (float(row[1]),
                                     float(row[2]),
                                     long(row[3]),
                                     float(row[4])))
                           for row in r)
    return _production.get(typename, None)

if __name__ == '__main__':
    main()
